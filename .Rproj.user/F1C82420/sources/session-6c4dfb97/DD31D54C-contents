library("tidyverse")

START_DATE <- "2021-01-01"
END_DATE   <- "2023-12-31"

submissions_file <- paste("OTHER_DATA/submissions.csv.gz", sep = "")

if (file.exists(submissions_file)) {
  df <- read_csv(file = submissions_file)
} else {
  
  # PROSPECTIVE SUBMISSIONS
  PATH <- "OTHER_DATA/data_processed/"
  files <- list.files(path = PATH, pattern = ".csv", recursive = TRUE)
  
  df_files <- data.frame(path = files) |>
              mutate(model = str_split(path, "/", simplify = TRUE)[, 1]) |>
              mutate(forecast_date = str_extract(path, "\\d{4}-\\d{2}-\\d{2}")) |>
              filter(forecast_date >= START_DATE, forecast_date <= END_DATE)
  
  # RETROSPECTIVE SUBMISSIONS
  PATH_RETRO <- "OTHER_DATA/data_processed_retrospective/"
  files <- list.files(path = PATH_RETRO, pattern = ".csv", recursive = TRUE)
  
  df_files2 <- data.frame(path = files) |>
               mutate(model = str_split(path, "/", simplify = TRUE)[, 1]) |>
               mutate(forecast_date = str_extract(path, "\\d{4}-\\d{2}-\\d{2}")) |>
               filter(forecast_date >= START_DATE, forecast_date <= END_DATE)
  
  df_files2 <- df_files2 |> filter(str_detect(path, "raw", negate = TRUE))
  
  # COMBINE PROSPECTIVE AND RETROSPECTIVE SUBMISSIONS
  df_files  <- df_files  |> mutate(retrospective = FALSE)
  df_files2 <- df_files2 |> mutate(retrospective = TRUE)
  
  d <- bind_rows(df_files, df_files2)
  d <- d |> group_by(model, forecast_date) |> mutate(duplicated = n() > 1)
  
  # If duplicated (prospective & retrospective) remove prospective submission
  d <- d |> filter(!(!retrospective & duplicated))
  
  d <- d |>
    rowwise() |>
    mutate(folder = if (retrospective) PATH_RETRO else PATH)
  
  # Load all submissions into one data frame in long format
  df <- data.frame()
  b <- txtProgressBar(min = 1, max = nrow(d), initial = 1)
  for (i in 1:nrow(d)) {
    row <- d[i, ]
    df_temp <- read_csv(paste(row$folder, row$path, sep = ""), show_col_types = FALSE, progress = FALSE)
    df_temp$model <- row$model
    df_temp$retrospective <- row$retrospective
    df <- bind_rows(df, df_temp)
    
    setTxtProgressBar(b, i)
  }
  close(b)
  
  ##################################################
  # Add updated ILM nowcasts
  ##################################################
  
  df <- df |> filter(model != "ILM")
  
  ILM_files <- list.files(path = "OTHER_DATA/data_processed_updated_models/ILM/", pattern = ".csv")
  
  b <- txtProgressBar(min = 1, max = length(ILM_files), initial = 1)
  for (i in 1:length(ILM_files)) {
    tmp_df <- read_csv(paste("OTHER_DATA/data_processed_updated_models/ILM/", ILM_files[i], sep = ""), show_col_types = FALSE, progress = FALSE)
    if (i == 1) {
      df_ILM <- tmp_df
    } else {
      df_ILM <- bind_rows(df_ILM, tmp_df)
    }
    setTxtProgressBar(b, i)
  }
  close(b)
  df_ILM <- df_ILM |> add_column(model = "ILM", retrospective = FALSE)
  
  df <- bind_rows(df, df_ILM)
  
  ##################################################
  # FIX PROBLEMATIC CASES (Wolffram et at., 2023)
  ##################################################
  
  source("OTHER_DATA/utils_process_data.R")
  
  df <- fix_RKI(df)  # Replace unrealistic results
  df <- fix_Epiforecasts(df) # Interpolate missing quantiles
  # df <- fix_ILM(df) # No: missing data
  # df <- fix_LMU(df) # No: missing data
  
  ##################################################
  ##################################################
  
  write_csv(df, submissions_file)
}

##################################################
##################################################

source("utils.R")

START_DATE_FILT <- "2021-11-22"
END_DATE_FIL    <- "2022-08-21"

missing_file <- paste("OTHER_DATA/missing.csv.gz", sep = "")

if (file.exists(missing_file)) {
  diff_df <- read_csv(file = missing_file)
} else {

  df <- df |> filter(forecast_date >= START_DATE_FILT, forecast_date <= END_DATE_FIL)
  df <- df |> filter(type == "quantile")
  write_csv(df , paste("OTHER_DATA/data.csv.gz", sep = "")) # SAVE FILTERED DATA
  
  
  locations  <- c("DE")
  age_groups <- c("00+", "00-04", "05-14", "15-34", "35-59", "60-79", "80+")
  forecast_dates <- seq(from = as.Date(START_DATE_FILT), to = as.Date(END_DATE_FIL), by = "1 day")
  horizon <- -28:0
  targets <- paste(horizon, " day ahead inc hosp", sep = "")
  probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
  models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ") 
  
  new_df_1 <- as_tibble(data.frame(
    location      = rep(locations, each = (length(age_groups) * length(forecast_dates) * length(targets) * length(probs) * length(models))),
    age_group     = rep(rep(age_groups, each = (length(forecast_dates) * length(targets) * length(probs) * length(models))), (length(locations))),
    forecast_date = rep(rep(forecast_dates, each = (length(targets) * length(probs) * length(models))), (length(locations) * length(age_groups))),
    target        = rep(rep(targets, each = (length(probs) * length(models))), (length(locations) * length(age_groups) * length(forecast_dates))),
    quantile      = rep(rep(probs, each = (length(models))), (length(locations) * length(age_groups) * length(forecast_dates) * length(targets))),
    model         = rep(models, (length(locations) * length(age_groups) * length(forecast_dates) * length(targets) * length(probs)))
  ))
  
  locations  <- c("DE-BB", "DE-BE", "DE-BW", "DE-BY", "DE-HB", "DE-HE", "DE-HH", "DE-MV", "DE-NI", "DE-NW", "DE-RP", "DE-SH", "DE-SL", "DE-SN", "DE-ST", "DE-TH")
  age_groups <- c("00+")
  forecast_dates <- seq(from = as.Date(START_DATE_FILT), to = as.Date(END_DATE_FIL), by = "1 day")
  horizon <- -28:0
  targets <- paste(horizon, " day ahead inc hosp", sep = "")
  probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
  models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ") 
  
  new_df_2 <- as_tibble(data.frame(
    location      = rep(locations, each = (length(age_groups) * length(forecast_dates) * length(targets) * length(probs) * length(models))),
    age_group     = rep(rep(age_groups, each = (length(forecast_dates) * length(targets) * length(probs) * length(models))), (length(locations))),
    forecast_date = rep(rep(forecast_dates, each = (length(targets) * length(probs) * length(models))), (length(locations) * length(age_groups))),
    target        = rep(rep(targets, each = (length(probs) * length(models))), (length(locations) * length(age_groups) * length(forecast_dates))),
    quantile      = rep(rep(probs, each = (length(models))), (length(locations) * length(age_groups) * length(forecast_dates) * length(targets))),
    model         = rep(models, (length(locations) * length(age_groups) * length(forecast_dates) * length(targets) * length(probs)))
  ))
  
  new_df <- bind_rows(new_df_1, new_df_2)
  
  diff_df <- anti_join(new_df, df, by = c("location", "age_group", "forecast_date", "target", "quantile", "model"))
  
  write_csv(new_df , paste("OTHER_DATA/complete.csv.gz", sep = ""))
  write_csv(diff_df, missing_file)
}



