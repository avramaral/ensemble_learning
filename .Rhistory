formula <- y ~ b0 + f(s, model = spde)
res <- inla(formula,
family = "binomial",
Ntrials = numtrials,
control.family = list(link = "logit"),
data = inla.stack.data(stk.full),
control.predictor = list(compute = TRUE, link = 1, A = inla.stack.A(stk.full)))
idx <- inla.stack.index(stk.p, "pred")$data
fitted <- res$summary.fitted.values[idx, c("0.5quant")]
plot(estimate, fitted, pch = 16, col = "red")
abline(a = 0, b = 1)
legend(0.01, 0.24, legend = c("INLA estimates, Besag"), col = c("red"), pch = c(16, 16), cex = 0.8, title = "", text.font = 4, bg = "lightblue")
args <- commandArgs(trailingOnly = TRUE)
all_states <- as.logical(args[1])
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball" # c("wis", "pinball")
skip_recent_days <- FALSE # c(TRUE, FALSE)
training_size <- 90
uncertain_size <- 40
exploratory_wis <- FALSE # Plotting score for all individual and naive ensemble models
ignore_naive_ensemble_data <- TRUE # Remove naive ensembles from the data objects, so the trained models do not take them as inputs
quant <- TRUE # Weights depend (or not) on the quantiles
horiz <- FALSE # Weights depend (or not) on the horizons # Only implemented for `TRUE` for stratified analysis
post_processing <- FALSE
post_select_mod <- "Epiforecasts"
state_idx <- 17 # c(1:16, 17)
age_idx <- 7 # c(1:6, 7)
method <- "Mean" # c("Mean", "Median", "all_quant")
cluster_size <- 4
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
if ((length(state) == 1) & (length(age) == 1)) {
if ((state == "DE") & (age == "00+")) {
idx_missing_model <- -(1:length(models))
} else if ((state == "DE") & (age != "00+")) {
idx_missing_model <- which(models == "RKI")
} else if ((state != "DE") & (age == "00+")) {
idx_missing_model <- which(models == "ILM")
} else { stop("This combination of `state` and `age` does not exist.") }
} else {
if (length(age) != 1) {
idx_missing_model <- which(models == "RKI")
} else if (length(state) != 1) {
idx_missing_model <- which(models == "ILM")
} else { stop("Error.") }
}
models <- models[-idx_missing_model]
colors <- colors[-idx_missing_model]
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
r <- range(data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
filter_data
data <- read_csv(file = "DATA/data.csv.gz")
data
data$model %>% unique()
KIT-frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
data
KIT-frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
models_orig <- models
colors_orig <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
models <- c("Mean", "Median", "DISW (St.1.)", "DISW (St.2.)", "ISW (St.1.)", "ISW (St.2.)")
colors <- c("#009E73", "#60D1B3", "#9400D3", "#9370DB", "#C71585", "#FF1493")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball" # c("wis", "pinball")
skip_recent_days <- FALSE # c(TRUE, FALSE)
training_size <- 90
uncertain_size <- 40
exploratory_wis <- FALSE # Plotting score for all individual and naive ensemble models
ignore_naive_ensemble_data <- TRUE # Remove naive ensembles from the data objects, so the trained models do not take them as inputs
quant <- TRUE # Weights depend (or not) on the quantiles
horiz <- FALSE # Weights depend (or not) on the horizons # Only implemented for `TRUE` for stratified analysis
post_processing <- FALSE
post_select_mod <- "Epiforecasts"
state_idx <- 17 # c(1:16, 17)
age_idx <- 7 # c(1:6, 7)
method <- "Mean" # c("Mean", "Median", "all_quant")
cluster_size <- 4
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
if ((length(state) == 1) & (length(age) == 1)) {
if ((state == "DE") & (age == "00+")) {
idx_missing_model <- -(1:length(models))
} else if ((state == "DE") & (age != "00+")) {
idx_missing_model <- which(models == "RKI")
} else if ((state != "DE") & (age == "00+")) {
idx_missing_model <- which(models == "ILM")
} else { stop("This combination of `state` and `age` does not exist.") }
} else {
if (length(age) != 1) {
idx_missing_model <- which(models == "RKI")
} else if (length(state) != 1) {
idx_missing_model <- which(models == "ILM")
} else { stop("Error.") }
}
models <- models[-idx_missing_model]
colors <- colors[-idx_missing_model]
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
r <- range(data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
r
KIT_frozen_baseline <- KIT_frozen_baseline %>% filter(forecast_date >= r[1], forecast_date <= r[2])
KIT_frozen_baseline
data
data %>% filter(model == "Epiforecasts")
age
state
KIT_frozen_baseline <- KIT_frozen_baseline %>% filter(forecast_date >= r[1], forecast_date <= r[2], age_group == age, location == state)
KIT_frozen_baseline
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball" # c("wis", "pinball")
skip_recent_days <- FALSE # c(TRUE, FALSE)
training_size <- 90
uncertain_size <- 40
exploratory_wis <- FALSE # Plotting score for all individual and naive ensemble models
ignore_naive_ensemble_data <- TRUE # Remove naive ensembles from the data objects, so the trained models do not take them as inputs
quant <- TRUE # Weights depend (or not) on the quantiles
horiz <- FALSE # Weights depend (or not) on the horizons # Only implemented for `TRUE` for stratified analysis
post_processing <- FALSE
post_select_mod <- "Epiforecasts"
state_idx <- 17 # c(1:16, 17)
age_idx <- 7 # c(1:6, 7)
method <- "Mean" # c("Mean", "Median", "all_quant")
reparameterize <- TRUE
state_idx <- 1:16
age_idx <- 7
cluster_size <- 4
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
if ((length(state) == 1) & (length(age) == 1)) {
if ((state == "DE") & (age == "00+")) {
idx_missing_model <- -(1:length(models))
} else if ((state == "DE") & (age != "00+")) {
idx_missing_model <- which(models == "RKI")
} else if ((state != "DE") & (age == "00+")) {
idx_missing_model <- which(models == "ILM")
} else { stop("This combination of `state` and `age` does not exist.") }
} else {
if (length(age) != 1) {
idx_missing_model <- which(models == "RKI")
} else if (length(state) != 1) {
idx_missing_model <- which(models == "ILM")
} else { stop("Error.") }
}
models <- models[-idx_missing_model]
colors <- colors[-idx_missing_model]
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
r <- range(data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
KIT_frozen_baseline <- KIT_frozen_baseline %>% filter(forecast_date >= r[1], forecast_date <= r[2], age_group %in% age, location %in% state)
baseline <- KIT_frozen_baseline
naive_ensemble_files <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
if (length(naive_ensemble_files) == 1) {
naive_ensemble_file <- naive_ensemble_files[1]
if (file.exists(naive_ensemble_file)) {
naive_ensemble <- readRDS(file = naive_ensemble_file)
} else {
naive_ensemble <- compute_naive_ensemble(data = data, loc = state, age_gr = age)
saveRDS(object = naive_ensemble, file = naive_ensemble_file)
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
if (post_processing) { # Allows post-processing
idx_post <- match(x = post_select_mod, table = models)
if(is.na(idx_post)) { stop("Select a valid model to post-process.") }
ens_models <- models[idx_post]
ens_colors <- colors[idx_post]
}
} else { # Does not allow for post-processing
for (i in 1:length(naive_ensemble_files)) {
naive_ensemble_file <- naive_ensemble_files[i]
if (file.exists(naive_ensemble_file)) { tmp_naive_ensemble <- readRDS(file = naive_ensemble_file) } else { stop("Create files first.") }
if (i == 1) {
naive_ensemble <- tmp_naive_ensemble
} else {
naive_ensemble <- rbind(naive_ensemble, tmp_naive_ensemble)
}
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
}
method_files <- ifelse(method == "all_quant", "all_quant_", "")
retrieved_data_files <- paste("DATA/TRAINING/retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (length(retrieved_data_files) == 1) {
retrieved_data_file <- retrieved_data_files[1]
if (file.exists(retrieved_data_file)) {
retrieved_data <- readRDS(file = retrieved_data_file)
} else {
retrieved_data <- retrieve_data(data = data, truth_data = truth_data, naive_ensemble = naive_ensemble, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = 1, training_size = training_size, method = method)
saveRDS(object = retrieved_data, file = retrieved_data_file)
}
y         <- retrieved_data$y
y_current <- retrieved_data$y_current
values    <- retrieved_data$values
current   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
new_retrieved_data_file <- paste("DATA/TRAINING/new_retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (!file.exists(new_retrieved_data_file)) {
new_retrieved_data <- reparameterize_model(y = y, y_current = y_current, value = values, current = current, baseline = baseline)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y         <- new_retrieved_data$y
y_current <- new_retrieved_data$y_current
values    <- new_retrieved_data$values
current   <- new_retrieved_data$current
}
if (post_processing) { # Select just one model (`ens_models`) for post-processing
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = idx_post)
current <- new_tmp_data$current
values <- new_tmp_data$values
} else {
if (ignore_naive_ensemble_data) { # Remove `Mean` and `Median` from the data objects
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = (1:length(ens_models)))
current <- new_tmp_data$current
values <- new_tmp_data$values
}
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y, values = values, uncertain_size = uncertain_size, method = method)
y      <- new_tmp_data$y
values <- new_tmp_data$values
}
} else { # Does not allow for post-processing (if so, checking the indexing--since there are missing models)
y <- list()
y_current <- list()
values <- list()
current <- list()
for (i in 1:length(retrieved_data_files)) {
print(paste(sprintf("%02d", i), " out of ", sprintf("%02d", length(retrieved_data_files)), sep = ""))
retrieved_data_file <- retrieved_data_files[i]
if (file.exists(retrieved_data_file)) { retrieved_data <- readRDS(file = retrieved_data_file) } else { stop("Create files first.") }
y[[i]]         <- retrieved_data$y
y_current[[i]] <- retrieved_data$y_current
values[[i]]    <- retrieved_data$values
current[[i]]   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
parts_path <- strsplit(retrieved_data_file, "/")[[1]]
new_retrieved_data_file <- paste(parts_path[1], "/", parts_path[2], "/new_", parts_path[3] ,sep = "")
if (!file.exists(new_retrieved_data_file)) {
new_retrieved_data <- reparameterize_model(y = y[[i]], y_current = y_current[[i]], values = values[[i]], current = current[[i]], baseline = baseline)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y[[i]]         <- new_retrieved_data$y
y_current[[i]] <- new_retrieved_data$y_current
values[[i]]    <- new_retrieved_data$values
current[[i]]   <- new_retrieved_data$current
}
if (ignore_naive_ensemble_data) {
new_tmp_data <- process_data_ignore_models(current = current[[i]], values = values[[i]], idx_models = (1:length(ens_models)))
current[[i]] <- new_tmp_data$current
values[[i]] <- new_tmp_data$values
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y[[i]], values = values[[i]], uncertain_size = uncertain_size)
y[[i]]      <- new_tmp_data$y
values[[i]] <- new_tmp_data$values
}
}
if (length(y) == 16) { tmp_names <- state } else if (length(y) == 6) { tmp_names <- age } else { tmp_names <- NULL }
if (!is.null(tmp_names)) { names(y) <- names(y_current) <- names(values) <- names(current) <- tmp_names }
}
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball" # c("wis", "pinball")
skip_recent_days <- FALSE # c(TRUE, FALSE)
training_size <- 90
uncertain_size <- 40
exploratory_wis <- FALSE # Plotting score for all individual and naive ensemble models
ignore_naive_ensemble_data <- TRUE # Remove naive ensembles from the data objects, so the trained models do not take them as inputs
quant <- TRUE # Weights depend (or not) on the quantiles
horiz <- FALSE # Weights depend (or not) on the horizons # Only implemented for `TRUE` for stratified analysis
post_processing <- FALSE
post_select_mod <- "Epiforecasts"
state_idx <- 17 # c(1:16, 17)
age_idx <- 7 # c(1:6, 7)
method <- "Mean" # c("Mean", "Median", "all_quant")
reparameterize <- TRUE
state_idx <- 1:16
age_idx <- 7
cluster_size <- 4
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
if ((length(state) == 1) & (length(age) == 1)) {
if ((state == "DE") & (age == "00+")) {
idx_missing_model <- -(1:length(models))
} else if ((state == "DE") & (age != "00+")) {
idx_missing_model <- which(models == "RKI")
} else if ((state != "DE") & (age == "00+")) {
idx_missing_model <- which(models == "ILM")
} else { stop("This combination of `state` and `age` does not exist.") }
} else {
if (length(age) != 1) {
idx_missing_model <- which(models == "RKI")
} else if (length(state) != 1) {
idx_missing_model <- which(models == "ILM")
} else { stop("Error.") }
}
models <- models[-idx_missing_model]
colors <- colors[-idx_missing_model]
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
r <- range(data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
KIT_frozen_baseline <- KIT_frozen_baseline %>% filter(forecast_date >= r[1], forecast_date <= r[2], age_group %in% age, location %in% state)
baseline <- KIT_frozen_baseline
naive_ensemble_files <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
if (length(naive_ensemble_files) == 1) {
naive_ensemble_file <- naive_ensemble_files[1]
if (file.exists(naive_ensemble_file)) {
naive_ensemble <- readRDS(file = naive_ensemble_file)
} else {
naive_ensemble <- compute_naive_ensemble(data = data, loc = state, age_gr = age)
saveRDS(object = naive_ensemble, file = naive_ensemble_file)
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
if (post_processing) { # Allows post-processing
idx_post <- match(x = post_select_mod, table = models)
if(is.na(idx_post)) { stop("Select a valid model to post-process.") }
ens_models <- models[idx_post]
ens_colors <- colors[idx_post]
}
} else { # Does not allow for post-processing
for (i in 1:length(naive_ensemble_files)) {
naive_ensemble_file <- naive_ensemble_files[i]
if (file.exists(naive_ensemble_file)) { tmp_naive_ensemble <- readRDS(file = naive_ensemble_file) } else { stop("Create files first.") }
if (i == 1) {
naive_ensemble <- tmp_naive_ensemble
} else {
naive_ensemble <- rbind(naive_ensemble, tmp_naive_ensemble)
}
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
}
method_files <- ifelse(method == "all_quant", "all_quant_", "")
retrieved_data_files <- paste("DATA/TRAINING/retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (length(retrieved_data_files) == 1) {
retrieved_data_file <- retrieved_data_files[1]
if (file.exists(retrieved_data_file)) {
retrieved_data <- readRDS(file = retrieved_data_file)
} else {
retrieved_data <- retrieve_data(data = data, truth_data = truth_data, naive_ensemble = naive_ensemble, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = 1, training_size = training_size, method = method)
saveRDS(object = retrieved_data, file = retrieved_data_file)
}
y         <- retrieved_data$y
y_current <- retrieved_data$y_current
values    <- retrieved_data$values
current   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
new_retrieved_data_file <- paste("DATA/TRAINING/new_retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (!file.exists(new_retrieved_data_file)) {
new_retrieved_data <- reparameterize_model(y = y, y_current = y_current, value = values, current = current, baseline = baseline)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y         <- new_retrieved_data$y
y_current <- new_retrieved_data$y_current
values    <- new_retrieved_data$values
current   <- new_retrieved_data$current
}
if (post_processing) { # Select just one model (`ens_models`) for post-processing
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = idx_post)
current <- new_tmp_data$current
values <- new_tmp_data$values
} else {
if (ignore_naive_ensemble_data) { # Remove `Mean` and `Median` from the data objects
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = (1:length(ens_models)))
current <- new_tmp_data$current
values <- new_tmp_data$values
}
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y, values = values, uncertain_size = uncertain_size, method = method)
y      <- new_tmp_data$y
values <- new_tmp_data$values
}
} else { # Does not allow for post-processing (if so, checking the indexing--since there are missing models)
y <- list()
y_current <- list()
values <- list()
current <- list()
for (i in 1:length(retrieved_data_files)) {
print(paste(sprintf("%02d", i), " out of ", sprintf("%02d", length(retrieved_data_files)), sep = ""))
retrieved_data_file <- retrieved_data_files[i]
if (file.exists(retrieved_data_file)) { retrieved_data <- readRDS(file = retrieved_data_file) } else { stop("Create files first.") }
y[[i]]         <- retrieved_data$y
y_current[[i]] <- retrieved_data$y_current
values[[i]]    <- retrieved_data$values
current[[i]]   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
parts_path <- strsplit(retrieved_data_file, "/")[[1]]
new_retrieved_data_file <- paste(parts_path[1], "/", parts_path[2], "/new_", parts_path[3] ,sep = "")
if (!file.exists(new_retrieved_data_file)) {
if (length(state) > 1) {
tmp_state <- state[1]
tmp_age   <- age
} else if (length(age) > 1) {
tmp_state <- state
tmp_age   <- age[1]
}
new_retrieved_data <- reparameterize_model(y = y[[i]], y_current = y_current[[i]], values = values[[i]], current = current[[i]], baseline = baseline, state = tmp_state, age = tmp_age)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y[[i]]         <- new_retrieved_data$y
y_current[[i]] <- new_retrieved_data$y_current
values[[i]]    <- new_retrieved_data$values
current[[i]]   <- new_retrieved_data$current
}
if (ignore_naive_ensemble_data) {
new_tmp_data <- process_data_ignore_models(current = current[[i]], values = values[[i]], idx_models = (1:length(ens_models)))
current[[i]] <- new_tmp_data$current
values[[i]] <- new_tmp_data$values
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y[[i]], values = values[[i]], uncertain_size = uncertain_size)
y[[i]]      <- new_tmp_data$y
values[[i]] <- new_tmp_data$values
}
}
if (length(y) == 16) { tmp_names <- state } else if (length(y) == 6) { tmp_names <- age } else { tmp_names <- NULL }
if (!is.null(tmp_names)) { names(y) <- names(y_current) <- names(values) <- names(current) <- tmp_names }
}
