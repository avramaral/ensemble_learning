if (skip_space) {
df_wis$model <- as.character(df_wis$model)
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "sprd"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "over"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "undr"))
df_wis$model <- factor(x = df_wis$model, levels = c(models[skip_first], "space", models[skip_last]), labels = c(models[skip_first], "space", models[skip_last]))
df_wis$wis <- as.numeric(df_wis$wis)
}
if (change_name_select) {
models <- c("Mean", "Median", "Post-Mean", "Post-Median", "Mean-Post", "Median-Post", "DISW 1", "DISW 2", "DISW 3", "DISW 4", "AISW 1", "AISW 2", "AISW 3", "AISW 4", "Select-4 Mean 2", "Select-4 Median 2")
}
if (skip_space) {
colors_ordered <- c(colors[skip_first], "cyan", colors[skip_last])
names(colors_ordered) <- c(models[skip_first], "space", models[skip_last])
} else {
colors_ordered <- colors
names(colors_ordered) <- models
}
if (change_name_select) {
df_wis <- df_wis %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Mean",   "Select-4 Mean 2",   model)) %>% mutate(model = as.factor(model))
df_wis <- df_wis %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Median", "Select-4 Median 2", model)) %>% mutate(model = as.factor(model))
df_wis_total <- df_wis_total %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Mean",   "Select-4 Mean 2",   model)) %>% mutate(model = as.factor(model))
df_wis_total <- df_wis_total %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Median", "Select-4 Median 2", model)) %>% mutate(model = as.factor(model))
}
pp <- ggplot() +
geom_bar(data = df_wis, aes(x = model, y = wis), fill = "white", stat = "identity") +
geom_bar(data = df_wis, aes(x = model, y = wis, fill = model, alpha = component, color = model), stat = "identity") +
geom_label(
data = df_wis_total, aes(x = model, y = 0.5 * as.numeric(wis), label = sprintf("%0.2f", round(as.numeric(wis), digits = 2))),
fill = "white", alpha = 1, hjust = 0.5,
label.r = unit(0.15, "lines"),
size = 10 / .pt,
family = "LM Roman 10",
label.padding = unit(0.2, "lines")
) +
{ if (!is.null(reference_pts)) geom_point(data = reference_pts, aes(x = model, y = value), pch = 1, size = 3) } +
scale_fill_manual(values = colors_ordered, guide = "none") +
scale_color_manual(values = colors_ordered, guide = "none") +
scale_alpha_manual(
values = c(0.5, 0.2, 1.0),
labels = c("Overprediction", "Spread", "Underprediction"),
guide = guide_legend(reverse = TRUE, title.position = "top", title.hjust = 0.5)
) +
{ if ( skip_space) scale_x_discrete(limits = rev(c(models[skip_first], "space", models[skip_last])), labels = rev(c(models[skip_first], " ", models[skip_last])), drop = FALSE) } +
{ if (!skip_space) scale_x_discrete(limits = rev(models), drop = FALSE) } +
#####################
# Add second x-axis #
#####################
{ if (!is.null(df_wis_baseline)) scale_y_continuous(name = "WIS (Averaged all)", limits = c(0, ylim_manual), sec.axis = sec_axis(~ . / total_baseline, name = "Relative WIS") ) } +
{ if ( is.null(df_wis_baseline)) ylim(0, ylim_manual) } +
#####################
# + best ind models #
#####################
# { if (add_best_ind_models) geom_hline(yintercept = c(93.67), linetype = "solid",  color = "#444444FF") } +
# { if (add_best_ind_models) geom_hline(yintercept = c(89.26), linetype = "dotted", color = "#444444FF") } +
{ if (add_best_ind_models) geom_hline(aes(yintercept = 93.67, linetype = "without post-proc."),        color = "#444444FF") } +
{ if (add_best_ind_models) geom_hline(aes(yintercept = 89.26, linetype = "with post-proc."), color = "#444444FF") } +
scale_linetype_manual(name = "Best ind. model",
values = c("without post-proc." = "solid", "with post-proc." = "dotted")
) +
#####################
# Arrange legends #
#####################
guides(
alpha =    guide_legend(order = 1, title.position = "top"),
linetype = guide_legend(order = 2, title.position = "top")
) +
#####################
labs(x = NULL, y = "WIS (Averaged all)", color = "Model", alpha = "Decomposition of WIS") +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom",
legend.box = "vertical", # Stack legends vertically
legend.box.just = "center",
text = element_text(size = 16, family = "LM Roman 10"),
axis.ticks.y = element_blank())
pp
}
# Bar plot
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE, skip_first = 1:6, skip_last = 7:16, change_name_select = TRUE, df_wis_baseline = df_wis_baseline, add_best_ind_models = TRUE)
wis_bar
plot_wis_bar <- function (df_wis, wis_summ, models, colors, ylim_manual = 200, skip_space = FALSE, skip_first = 1:8, skip_last = 9:10, reference_pts = NULL, change_name_select = FALSE, df_wis_baseline = NULL, add_best_ind_models = FALSE, ...) {
if (!is.null(df_wis_baseline)) { total_baseline <- sum(df_wis_baseline$wis) }
if (!is.null(reference_pts) &  skip_space) {
reference_pts <- data.frame(model = c(models[skip_first], "space", models[skip_last]), value = c(reference_pts[skip_first], NA, reference_pts[skip_last]))
reference_pts$model <- factor(x = reference_pts$model, levels = c(models[skip_first], "space", models[skip_last]), labels = c(models[skip_first], "space", models[skip_last]))
}
if (!is.null(reference_pts) & !skip_space) {
reference_pts <- data.frame(model = models, value = reference_pts)
reference_pts$model <- factor(x = models, levels = models, labels = models)
}
# Compute the total WIS based on the 3-part decomposition
df_wis_total <- data.frame(model = rep(NA, length(models)), wis = rep(NA, length(models)))
df_wis_total$model <- models
df_wis_total$model <- factor(x = df_wis_total$model, levels = models)
df_wis_total$wis <- Reduce(`+`, wis_summ) / length(wis_summ)
if (skip_space) {
df_wis$model <- as.character(df_wis$model)
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "sprd"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "over"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "undr"))
df_wis$model <- factor(x = df_wis$model, levels = c(models[skip_first], "space", models[skip_last]), labels = c(models[skip_first], "space", models[skip_last]))
df_wis$wis <- as.numeric(df_wis$wis)
}
if (change_name_select) {
models <- c("Mean", "Median", "Post-Mean", "Post-Median", "Mean-Post", "Median-Post", "DISW 1", "DISW 2", "DISW 3", "DISW 4", "AISW 1", "AISW 2", "AISW 3", "AISW 4", "Select-4 Mean 2", "Select-4 Median 2")
}
if (skip_space) {
colors_ordered <- c(colors[skip_first], "cyan", colors[skip_last])
names(colors_ordered) <- c(models[skip_first], "space", models[skip_last])
} else {
colors_ordered <- colors
names(colors_ordered) <- models
}
if (change_name_select) {
df_wis <- df_wis %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Mean",   "Select-4 Mean 2",   model)) %>% mutate(model = as.factor(model))
df_wis <- df_wis %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Median", "Select-4 Median 2", model)) %>% mutate(model = as.factor(model))
df_wis_total <- df_wis_total %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Mean",   "Select-4 Mean 2",   model)) %>% mutate(model = as.factor(model))
df_wis_total <- df_wis_total %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Median", "Select-4 Median 2", model)) %>% mutate(model = as.factor(model))
}
pp <- ggplot() +
geom_bar(data = df_wis, aes(x = model, y = wis), fill = "white", stat = "identity") +
geom_bar(data = df_wis, aes(x = model, y = wis, fill = model, alpha = component, color = model), stat = "identity") +
geom_label(
data = df_wis_total, aes(x = model, y = 0.5 * as.numeric(wis), label = sprintf("%0.2f", round(as.numeric(wis), digits = 2))),
fill = "white", alpha = 1, hjust = 0.5,
label.r = unit(0.15, "lines"),
size = 10 / .pt,
family = "LM Roman 10",
label.padding = unit(0.2, "lines")
) +
{ if (!is.null(reference_pts)) geom_point(data = reference_pts, aes(x = model, y = value), pch = 1, size = 3) } +
scale_fill_manual(values = colors_ordered, guide = "none") +
scale_color_manual(values = colors_ordered, guide = "none") +
scale_alpha_manual(
values = c(0.5, 0.2, 1.0),
labels = c("Overprediction", "Spread", "Underprediction"),
guide = guide_legend(reverse = TRUE, title.position = "top", title.hjust = 0.5)
) +
{ if ( skip_space) scale_x_discrete(limits = rev(c(models[skip_first], "space", models[skip_last])), labels = rev(c(models[skip_first], " ", models[skip_last])), drop = FALSE) } +
{ if (!skip_space) scale_x_discrete(limits = rev(models), drop = FALSE) } +
#####################
# Add second x-axis #
#####################
{ if (!is.null(df_wis_baseline)) scale_y_continuous(name = "WIS (Averaged all)", limits = c(0, ylim_manual), sec.axis = sec_axis(~ . / total_baseline, name = "Relative WIS") ) } +
{ if ( is.null(df_wis_baseline)) ylim(0, ylim_manual) } +
#####################
# + best ind models #
#####################
# { if (add_best_ind_models) geom_hline(yintercept = c(93.67), linetype = "solid",  color = "#444444FF") } +
# { if (add_best_ind_models) geom_hline(yintercept = c(89.26), linetype = "dotted", color = "#444444FF") } +
{ if (add_best_ind_models) geom_hline(aes(yintercept = 93.67, linetype = "without post-proc."), color = "#444444FF") } +
{ if (add_best_ind_models) geom_hline(aes(yintercept = 89.26, linetype = "with post-proc."),    color = "#444444FF") } +
scale_linetype_manual(name = "Best ind. model",
values = c("without post-proc." = "solid", "with post-proc." = "dotted")
) +
#####################
# Arrange legends #
#####################
guides(
alpha =    guide_legend(order = 1, title.position = "top"),
linetype = guide_legend(order = 2, title.position = "top")
) +
#####################
labs(x = NULL, y = "WIS (Averaged all)", color = "Model", alpha = "Decomposition of WIS") +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom",
legend.box = "vertical", # Stack legends vertically
legend.title.align = 0.5,  # Centre-align legend titles
legend.text.align = 0.5,   # Centre-align legend text
legend.box.just = "center", # Centre the entire legend box
text = element_text(size = 16, family = "LM Roman 10"),
axis.ticks.y = element_blank())
pp
}
# Bar plot
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE, skip_first = 1:6, skip_last = 7:16, change_name_select = TRUE, df_wis_baseline = df_wis_baseline, add_best_ind_models = TRUE)
wis_bar
plot_wis_bar <- function (df_wis, wis_summ, models, colors, ylim_manual = 200, skip_space = FALSE, skip_first = 1:8, skip_last = 9:10, reference_pts = NULL, change_name_select = FALSE, df_wis_baseline = NULL, add_best_ind_models = FALSE, ...) {
if (!is.null(df_wis_baseline)) { total_baseline <- sum(df_wis_baseline$wis) }
if (!is.null(reference_pts) &  skip_space) {
reference_pts <- data.frame(model = c(models[skip_first], "space", models[skip_last]), value = c(reference_pts[skip_first], NA, reference_pts[skip_last]))
reference_pts$model <- factor(x = reference_pts$model, levels = c(models[skip_first], "space", models[skip_last]), labels = c(models[skip_first], "space", models[skip_last]))
}
if (!is.null(reference_pts) & !skip_space) {
reference_pts <- data.frame(model = models, value = reference_pts)
reference_pts$model <- factor(x = models, levels = models, labels = models)
}
# Compute the total WIS based on the 3-part decomposition
df_wis_total <- data.frame(model = rep(NA, length(models)), wis = rep(NA, length(models)))
df_wis_total$model <- models
df_wis_total$model <- factor(x = df_wis_total$model, levels = models)
df_wis_total$wis <- Reduce(`+`, wis_summ) / length(wis_summ)
if (skip_space) {
df_wis$model <- as.character(df_wis$model)
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "sprd"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "over"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "undr"))
df_wis$model <- factor(x = df_wis$model, levels = c(models[skip_first], "space", models[skip_last]), labels = c(models[skip_first], "space", models[skip_last]))
df_wis$wis <- as.numeric(df_wis$wis)
}
if (change_name_select) {
models <- c("Mean", "Median", "Post-Mean", "Post-Median", "Mean-Post", "Median-Post", "DISW 1", "DISW 2", "DISW 3", "DISW 4", "AISW 1", "AISW 2", "AISW 3", "AISW 4", "Select-4 Mean 2", "Select-4 Median 2")
}
if (skip_space) {
colors_ordered <- c(colors[skip_first], "cyan", colors[skip_last])
names(colors_ordered) <- c(models[skip_first], "space", models[skip_last])
} else {
colors_ordered <- colors
names(colors_ordered) <- models
}
if (change_name_select) {
df_wis <- df_wis %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Mean",   "Select-4 Mean 2",   model)) %>% mutate(model = as.factor(model))
df_wis <- df_wis %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Median", "Select-4 Median 2", model)) %>% mutate(model = as.factor(model))
df_wis_total <- df_wis_total %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Mean",   "Select-4 Mean 2",   model)) %>% mutate(model = as.factor(model))
df_wis_total <- df_wis_total %>% mutate(model = as.character(model)) %>% mutate(model = ifelse(model == "Select-4 Median", "Select-4 Median 2", model)) %>% mutate(model = as.factor(model))
}
pp <- ggplot() +
geom_bar(data = df_wis, aes(x = model, y = wis), fill = "white", stat = "identity") +
geom_bar(data = df_wis, aes(x = model, y = wis, fill = model, alpha = component, color = model), stat = "identity") +
geom_label(
data = df_wis_total, aes(x = model, y = 0.5 * as.numeric(wis), label = sprintf("%0.2f", round(as.numeric(wis), digits = 2))),
fill = "white", alpha = 1, hjust = 0.5,
label.r = unit(0.15, "lines"),
size = 10 / .pt,
family = "LM Roman 10",
label.padding = unit(0.2, "lines")
) +
{ if (!is.null(reference_pts)) geom_point(data = reference_pts, aes(x = model, y = value), pch = 1, size = 3) } +
scale_fill_manual(values = colors_ordered, guide = "none") +
scale_color_manual(values = colors_ordered, guide = "none") +
scale_alpha_manual(
values = c(0.5, 0.2, 1.0),
labels = c("Overprediction", "Spread", "Underprediction"),
guide = guide_legend(reverse = TRUE, title.position = "top", title.hjust = 0.5)
) +
{ if ( skip_space) scale_x_discrete(limits = rev(c(models[skip_first], "space", models[skip_last])), labels = rev(c(models[skip_first], " ", models[skip_last])), drop = FALSE) } +
{ if (!skip_space) scale_x_discrete(limits = rev(models), drop = FALSE) } +
#####################
# Add second x-axis #
#####################
{ if (!is.null(df_wis_baseline)) scale_y_continuous(name = "WIS (Averaged all)", limits = c(0, ylim_manual), sec.axis = sec_axis(~ . / total_baseline, name = "Relative WIS") ) } +
{ if ( is.null(df_wis_baseline)) ylim(0, ylim_manual) } +
#####################
# + best ind models #
#####################
# { if (add_best_ind_models) geom_hline(yintercept = c(93.67), linetype = "solid",  color = "#444444FF") } +
# { if (add_best_ind_models) geom_hline(yintercept = c(89.26), linetype = "dotted", color = "#444444FF") } +
{ if (add_best_ind_models) geom_hline(aes(yintercept = 93.67, linetype = "without post-processing"), color = "#444444FF") } +
{ if (add_best_ind_models) geom_hline(aes(yintercept = 89.26, linetype = "with post-processing"),    color = "#444444FF") } +
scale_linetype_manual(name = "Best individual model",
values = c("without post-processing" = "solid", "with post-processing" = "dotted")
) +
#####################
# Arrange legends #
#####################
guides(
alpha =    guide_legend(order = 1, title.position = "top"),
linetype = guide_legend(order = 2, title.position = "top")
) +
#####################
labs(x = NULL, y = "WIS (Averaged all)", color = "Model", alpha = "Decomposition of WIS") +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom",
legend.box = "vertical", # Stack legends vertically
legend.title.align = 0.5,  # Centre-align legend titles
legend.text.align = 0.5,   # Centre-align legend text
legend.box.just = "center", # Centre the entire legend box
text = element_text(size = 16, family = "LM Roman 10"),
axis.ticks.y = element_blank())
pp
}
# Bar plot
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE, skip_first = 1:6, skip_last = 7:16, change_name_select = TRUE, df_wis_baseline = df_wis_baseline, add_best_ind_models = TRUE)
# Coverage plot
coverage_bar <- plot_coverage(coverage_models = coverage_models, models = models, colors = colors, change_name_select = TRUE, skip_space = TRUE, skip_first = 1:6, skip_last = 7:16)
# Line plot over the horizons
df_wis_horizon_truth <- compute_wis_horizon_truth(models = models, horizon = horizon, wis_summ = wis_summ)
wis_line_horizon <- plot_wis_line_horizon(df_wis_horizon = df_wis_horizon_truth, models = models, colors = colors)
tmp_ttl <- ""
p_total <- wis_bar + wis_line_horizon + coverage_bar + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10"))) + plot_layout(widths = c(1, 1, 1))
ggsave(filename = paste("PLOTS/ENSEMBLE/WIS_all_ensemble.jpeg", sep = ""), plot = p_total, width = 4900, height = 2000, units = c("px"), dpi = 300, bg = "white")
saveRDS(object = p_total, file = paste("PLOTS/ENSEMBLE/WIS_all_ensemble.RDS", sep = ""))
# Alternative way to combine it, so we can include the title
t_all    <- grid::textGrob("National level", gp = gpar(fontfamily = "LM Roman 10", cex = 1.5))
c_all    <- (wrap_elements(panel = t_all)    / p_total)    + plot_layout(heights = c(1, 10))
ggsave(filename = paste("PLOTS/ENSEMBLE/WIS_all_ensemble.jpeg", sep = ""), plot = c_all, width = 4900, height = 2000, units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/ENSEMBLE/WIS_all_ensemble.jpeg", sep = ""), plot = c_all, width = 4900, height = 2200, units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/ENSEMBLE/WIS_all_ensemble.jpeg", sep = ""), plot = c_all, width = 4900, height = 2500, units = c("px"), dpi = 300, bg = "white")
choose(n = 8, k = )
choose(n = 8, k = 2)
source("header.R")
source("utils.R")
source("aux.R")
# Setting: PP4, as per Table 1
skip_recent_days <- FALSE
method <- "Mean" # c("Mean", "Median", "all_quant")
strata <- "all"
state_idx <- 17
age_idx <- 7
quant <- TRUE
horiz <- TRUE
training_size <- 90
uncertain_size <- 40
reparameterize <- TRUE
reparameterize_file <- ifelse(reparameterize, "new_", "")
method_files <- ifelse(method == "all_quant", "all_quant_", "")
#############################
# LOAD AND PRE-PROCESS DATA #
#############################
### RAW DATA ###
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
data <- data %>% filter(!is.na(quantile), !(model %in% c("Mean", "Median")))
### POST-PROCESSED DATA ###
count <- 1
for (m in models) {
tmp_postprocessed_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/", reparameterize_file, method_files, "post-processing_model_", m, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
tmp_postprocessed_data <- readRDS(file = tmp_postprocessed_file)
tmp_postprocessed_data <- tmp_postprocessed_data$new_data
tmp_postprocessed_data$model <- m
if (count == 1) {
postprocessed_data <- tmp_postprocessed_data
} else {
postprocessed_data <- rbind(postprocessed_data, tmp_postprocessed_data)
}
count <- count + 1
}
cp_postprocessed_data <- postprocessed_data
r <- range(postprocessed_data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
postprocessed_data <- postprocessed_data %>% filter(location %in% unique(data$location), age_group %in% unique(data$age_group), forecast_date >= range(data$forecast_date)[1], forecast_date <= range(data$forecast_date)[2], model %in% unique(data$model))
##################################################
##################################################
# Make both data sets comparable
simple_models <- models[!(models %in% c("Mean", "Median"))]
data <- data %>% filter(forecast_date >= range(postprocessed_data$forecast_date)[1], forecast_date <= range(postprocessed_data$forecast_date)[2]) %>% arrange(location, age_group, model, forecast_date, target_end_date)
postprocessed_data <- postprocessed_data %>% arrange(location, age_group, model, forecast_date, target_end_date)
pairwise_models <- combn(simple_models, 2)
filename_dist <- paste("PLOTS/POSTPROCESS/pairwise_comparison_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, ".RDS", sep = "")
if (!file.exists(filename_dist)) {
dist_results <- list()
dist_results_horizon <- list()
dist_results_horizon_all <- list()
for (h in horizon) { dist_results_horizon[[as.character(h)]] <- list(dist_raw = c(), dist_postprocessed = c()) }
for (i in 1:ncol(pairwise_models)) {
print(paste("Pair: ", i, " (out of ", ncol(pairwise_models), ")", sep = ""))
pair <- c(pairwise_models[, i])
# Raw data
data_1 <- data %>% filter(model == pair[1])
data_2 <- data %>% filter(model == pair[2])
postprocessed_data_1 <- postprocessed_data %>% filter(model == pair[1])
postprocessed_data_2 <- postprocessed_data %>% filter(model == pair[2])
days <- seq(range(data$forecast_date)[1], range(data$forecast_date)[2], by = "1 day")
dist_raw <- c(); dist_postprocessed <- c()
count_days <- 0
pb <- txtProgressBar(min = 1, max = length(days), initial = 1)
for (d in days) {
count_days <- count_days + 1
data_1_tmp <- data_1 %>% filter(forecast_date == d)
data_2_tmp <- data_2 %>% filter(forecast_date == d)
postprocessed_data_1_tmp <- postprocessed_data_1 %>% filter(forecast_date == d)
postprocessed_data_2_tmp <- postprocessed_data_2 %>% filter(forecast_date == d)
for (h in horizon) {
data_1_tmp_tmp <- data_1_tmp %>% filter(target == paste(h, " day ahead inc hosp", sep = ""))
data_2_tmp_tmp <- data_2_tmp %>% filter(target == paste(h, " day ahead inc hosp", sep = ""))
postprocessed_data_1_tmp_tmp <- postprocessed_data_1_tmp %>% filter(target == paste(h, " day ahead inc hosp", sep = ""))
postprocessed_data_2_tmp_tmp <- postprocessed_data_2_tmp %>% filter(target == paste(h, " day ahead inc hosp", sep = ""))
tmp_dist_raw           <- wis_distance(q_vect = data_1_tmp_tmp$value,               obs_vect = data_2_tmp_tmp$value              )
tmp_dist_postprocessed <- wis_distance(q_vect = postprocessed_data_1_tmp_tmp$value, obs_vect = postprocessed_data_2_tmp_tmp$value)
dist_raw           <- c(dist_raw,           tmp_dist_raw)
dist_postprocessed <- c(dist_postprocessed, tmp_dist_postprocessed)
dist_results_horizon[[as.character(h)]]$dist_raw           <- c(dist_results_horizon[[as.character(h)]]$dist_raw,           tmp_dist_raw)
dist_results_horizon[[as.character(h)]]$dist_postprocessed <- c(dist_results_horizon[[as.character(h)]]$dist_postprocessed, tmp_dist_postprocessed)
}
setTxtProgressBar(pb, count_days)
}
close(pb)
dist_results[[i]] <- list(dist_raw = dist_raw, dist_postprocessed = dist_postprocessed)
dist_results_horizon_all[[i]] <- dist_results_horizon
}
saveRDS(object = dist_results,             file = filename_dist)
saveRDS(object = dist_results_horizon_all, file = sub("Mean", paste0(method, "_horiz"), filename_dist))
} else {
dist_results             <- readRDS(file = filename_dist)
dist_results_horizon_all <- readRDS(file = sub("Mean", paste0(method, "_horiz"), filename_dist))
}
dist_raw <- c(); dist_postprocessed <- c()
for (i in 1:ncol(pairwise_models)) {
dist_raw           <- c(dist_raw,           dist_results[[i]]$dist_raw)
dist_postprocessed <- c(dist_postprocessed, dist_results[[i]]$dist_postprocessed)
}
all_dist <- as_tibble(data.frame(dist_raw = dist_raw, dist_postprocessed = dist_postprocessed))
all_dist_horizon <- list()
for (h in horizon) {
dist_raw <- c(); dist_postprocessed <- c()
for (i in 1:ncol(pairwise_models)) {
dist_raw           <- c(dist_raw,           dist_results_horizon_all[[i]][[as.character(h)]]$dist_raw)
dist_postprocessed <- c(dist_postprocessed, dist_results_horizon_all[[i]][[as.character(h)]]$dist_postprocessed)
}
all_dist_horizon[[as.character(h)]] <- as_tibble(data.frame(dist_raw = dist_raw, dist_postprocessed = dist_postprocessed))
}
# summary_stats <- all_dist %>% pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
#   group_by(variable) %>%
#   summarise(lower  = quantile(value, 0.025),
#             upper  = quantile(value, 0.975),
#             median = median(value),
#             mean   = mean(value)) %>% mutate(variable = factor(variable, levels = c("dist_raw", "dist_postprocessed")))
#
# pp_error_bar <- ggplot(summary_stats, aes(x = variable)) +
#   geom_errorbar(aes(ymin = lower,  ymax = upper ), width = 0.250, colour = "black") +
#   geom_errorbar(aes(ymin = median, ymax = median), width = 0.125, colour = "blue") +
#   geom_point(aes(y = mean),   shape = 4,  size = 5, colour = "red") +
#   scale_x_discrete(labels = c("dist_raw" = "Original models", "dist_postprocessed" = "Post-processed models")) +
#   labs(title = "", x = "", y = "Integrated Quadratic Distance (IQD)") +
#   theme_bw() +
#   theme(legend.position = "bottom", text = element_text(size = 12, family = "LM Roman 10"))
#
# ggsave(filename = paste("PLOTS/POSTPROCESS/errorbar_pairwise_comparison_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, ".jpeg", sep = ""), plot = pp_error_bar, width = 1200, height = 1050, units = c("px"), dpi = 300, bg = "white")
filtered_data <- all_dist %>% pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
filter(value >= quantile(value, 0.025) & value <= quantile(value, 0.975)) %>%  mutate(variable = factor(variable, levels = c("dist_raw", "dist_postprocessed")))
pp_violin <- ggplot(filtered_data, aes(x = variable, y = value, fill = variable)) +
geom_violin(colour = "black") +
stat_summary(fun = "median", geom = "point", aes(shape = "Median"), size = 2.5, colour = "black") +
stat_summary(fun = "mean",   geom = "point", aes(shape = "Mean"),   size = 2.5, colour = "black") +
scale_x_discrete(labels = c("dist_raw" = "Original models", "dist_postprocessed" = "Post-processed models")) +
scale_fill_manual(values = c("dist_raw" = "#0000FF44", "dist_postprocessed" = "#FF000044")) +
scale_shape_manual(values = c("Median" = 1, "Mean" = 4)) +
labs(title = "All horizons", x = "", y = "Integrated Quadratic Distance (IQD)", shape = "") +
guides(fill = "none") +
ylim(c(0, 1300)) +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = 12, family = "LM Roman 10"))
############################
# PLOTS FOR OTHER HORIZONS #
############################
# HORIZON = 0
tmp_hh <- 0
filtered_data_opt_1 <- all_dist_horizon[[as.character(tmp_hh)]] %>% pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
filter(value >= quantile(value, 0.025) & value <= quantile(value, 0.975)) %>%  mutate(variable = factor(variable, levels = c("dist_raw", "dist_postprocessed")))
pp_violin_opt_1 <- ggplot(filtered_data_opt_1, aes(x = variable, y = value, fill = variable)) +
geom_violin(colour = "black") +
stat_summary(fun = "median", geom = "point", aes(shape = "Median"), size = 2.5, colour = "black") +
stat_summary(fun = "mean",   geom = "point", aes(shape = "Mean"),   size = 2.5, colour = "black") +
scale_x_discrete(labels = c("dist_raw" = "Original models", "dist_postprocessed" = "Post-processed models")) +
scale_fill_manual(values = c("dist_raw" = "#0000FF44", "dist_postprocessed" = "#FF000044")) +
scale_shape_manual(values = c("Median" = 1, "Mean" = 4)) +
labs(title = "Horizon = 0 days", x = "", y = "Integrated Quadratic Distance (IQD)", shape = "") +
guides(fill = "none") +
ylim(c(0, 1300)) +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = 12, family = "LM Roman 10"))
# HORIZON = 0
tmp_hh <- -7
filtered_data_opt_2 <- all_dist_horizon[[as.character(tmp_hh)]] %>% pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
filter(value >= quantile(value, 0.025) & value <= quantile(value, 0.975)) %>%  mutate(variable = factor(variable, levels = c("dist_raw", "dist_postprocessed")))
pp_violin_opt_2 <- ggplot(filtered_data_opt_2, aes(x = variable, y = value, fill = variable)) +
geom_violin(colour = "black") +
stat_summary(fun = "median", geom = "point", aes(shape = "Median"), size = 2.5, colour = "black") +
stat_summary(fun = "mean",   geom = "point", aes(shape = "Mean"),   size = 2.5, colour = "black") +
scale_x_discrete(labels = c("dist_raw" = "Original models", "dist_postprocessed" = "Post-processed models")) +
scale_fill_manual(values = c("dist_raw" = "#0000FF44", "dist_postprocessed" = "#FF000044")) +
scale_shape_manual(values = c("Median" = 1, "Mean" = 4)) +
labs(title = "Horizon = -7 days", x = "", y = "Integrated Quadratic Distance (IQD)", shape = "") +
guides(fill = "none") +
ylim(c(0, 1300)) +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = 12, family = "LM Roman 10"))
##################
# COMBINED PLOTS #
##################
pp_violin_opt_1_no_ylabel <- pp_violin_opt_1 + theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
pp_violin_opt_2_no_ylabel <- pp_violin_opt_2 + theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
pp_wis_age_comb <- pp_violin + pp_violin_opt_1_no_ylabel + pp_violin_opt_2_no_ylabel + plot_layout(guides = "collect") & theme(legend.position = "bottom")
ggsave(filename = paste("PLOTS/POSTPROCESS/violin_pairwise_comparison_skip_",   skip_recent_days, "_horiz_", horiz, "_method_", method, ".jpeg", sep = ""), plot = pp_wis_age_comb, width = 3000, height = 1250, units = c("px"), dpi = 300, bg = "white")
# Define the dates
date1 <- as.Date("2022-08-08")
date2 <- as.Date("2021-11-02")
# Calculate the difference in days
difference_in_days <- as.numeric(difftime(date1, date2, units = "days"))
# Print the result
difference_in_days
date1 <- as.Date("2022-08-08", format = "%Y-%m-%d")
date2 <- as.Date("2021-11-02", format = "%Y-%m-%d")
# Calculate the difference in days
difference_in_days <- as.numeric(difftime(date1, date2, units = "days"))
difference_in_days
