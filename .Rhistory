ens_method <- "wis" # c("wis", "pinball", "ranked_unweighted")
skip_recent_days <- FALSE # c(TRUE, FALSE)
training_size <- 90
uncertain_size <- 40
exploratory_wis <- FALSE # Plotting score for all individual and naive ensemble models
ignore_naive_ensemble_data <- TRUE # Remove naive ensembles from the data objects, so the trained models do not take them as inputs
quant <- TRUE # Weights depend (or not) on the quantiles
horiz <- TRUE # Weights depend (or not) on the horizons
post_processing <- FALSE
post_select_mod <- "KIT"
method <- "Mean" # c("Mean", "Median", "all_quant") # How to summarize the recent past
strata <- "states" # c("states", "ages", "all")
if (strata == "states") {
state_idx <- 1:16
age_idx <- 7
cluster_size <- 64
by <- 0.05
} else if (strata == "ages") {
state_idx <- 17
age_idx <- 1:6
cluster_size <- 32
by <- 0.025
} else {
state_idx <- 17
age_idx <- 7
by <- 0.025
}
########################
# Ranked unweighted pars
n_ensemble_models <- 1 # 1:8
unweighted_method <- "Mean" # c("Mean", "Median")
reparameterize <- TRUE # Model the difference if `TRUE`
cluster_size <- 8
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
if ((length(state) == 1) & (length(age) == 1)) {
if ((state == "DE") & (age == "00+")) {
idx_missing_model <- -(1:length(models))
} else if ((state == "DE") & (age != "00+")) {
idx_missing_model <- which(models == "RKI")
} else if ((state != "DE") & (age == "00+")) {
idx_missing_model <- which(models == "ILM")
} else { stop("This combination of `state` and `age` does not exist.") }
} else {
if (length(age) != 1) {
idx_missing_model <- which(models == "RKI")
} else if (length(state) != 1) {
idx_missing_model <- which(models == "ILM")
} else { stop("Error.") }
}
models <- models[-idx_missing_model]
colors <- colors[-idx_missing_model]
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
r <- range(data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
KIT_frozen_baseline <- KIT_frozen_baseline %>% filter(forecast_date >= r[1], forecast_date <= r[2], age_group %in% age, location %in% state)
baseline <- KIT_frozen_baseline
if (length(state) == 16) { baseline <- fix_baseline(baseline) }
naive_ensemble_files <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
if (length(naive_ensemble_files) == 1) {
naive_ensemble_file <- naive_ensemble_files[1]
if (file.exists(naive_ensemble_file)) {
naive_ensemble <- readRDS(file = naive_ensemble_file)
} else {
naive_ensemble <- compute_naive_ensemble(data = data, loc = state, age_gr = age)
saveRDS(object = naive_ensemble, file = naive_ensemble_file)
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
if (post_processing) { # Allows post-processing
idx_post <- match(x = post_select_mod, table = models)
if(is.na(idx_post)) { stop("Select a valid model to post-process.") }
ens_models <- models[idx_post]
ens_colors <- colors[idx_post]
}
} else { # Does not allow for post-processing
for (i in 1:length(naive_ensemble_files)) {
naive_ensemble_file <- naive_ensemble_files[i]
if (file.exists(naive_ensemble_file)) { tmp_naive_ensemble <- readRDS(file = naive_ensemble_file) } else { stop("Create files first.") }
if (i == 1) {
naive_ensemble <- tmp_naive_ensemble
} else {
naive_ensemble <- rbind(naive_ensemble, tmp_naive_ensemble)
}
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
}
method_files <- ifelse(method == "all_quant", "all_quant_", "")
retrieved_data_files <- paste("DATA/TRAINING/retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (length(retrieved_data_files) == 1) {
retrieved_data_file <- retrieved_data_files[1]
if (file.exists(retrieved_data_file)) {
retrieved_data <- readRDS(file = retrieved_data_file)
} else {
retrieved_data <- retrieve_data(data = data, truth_data = truth_data, naive_ensemble = naive_ensemble, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = 1, training_size = training_size, method = method)
saveRDS(object = retrieved_data, file = retrieved_data_file)
}
y         <- retrieved_data$y
y_current <- retrieved_data$y_current
values    <- retrieved_data$values
current   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
new_retrieved_data_file <- paste("DATA/TRAINING/new_retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (!file.exists(new_retrieved_data_file)) {
if (method == "all_quant") { tmp_method <- method } else { tmp_method <- NULL }
new_retrieved_data <- reparameterize_model(y = y, y_current = y_current, value = values, current = current, baseline = baseline, method = tmp_method)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y         <- new_retrieved_data$y
y_current <- new_retrieved_data$y_current
values    <- new_retrieved_data$values
current   <- new_retrieved_data$current
}
if (post_processing) { # Select just one model (`ens_models`) for post-processing
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = idx_post)
current <- new_tmp_data$current
values <- new_tmp_data$values
} else {
if (ignore_naive_ensemble_data) { # Remove `Mean` and `Median` from the data objects
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = (1:length(ens_models)))
current <- new_tmp_data$current
values <- new_tmp_data$values
}
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y, values = values, uncertain_size = uncertain_size, method = method)
y      <- new_tmp_data$y
values <- new_tmp_data$values
}
} else { # Does not allow for post-processing (if so, checking the indexing--since there are missing models)
y <- list()
y_current <- list()
values <- list()
current <- list()
for (i in 1:length(retrieved_data_files)) {
print(paste(sprintf("%02d", i), " out of ", sprintf("%02d", length(retrieved_data_files)), sep = ""))
retrieved_data_file <- retrieved_data_files[i]
if (file.exists(retrieved_data_file)) { retrieved_data <- readRDS(file = retrieved_data_file) } else { stop("Create files first.") }
y[[i]]         <- retrieved_data$y
y_current[[i]] <- retrieved_data$y_current
values[[i]]    <- retrieved_data$values
current[[i]]   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
parts_path <- strsplit(retrieved_data_file, "/")[[1]]
new_retrieved_data_file <- paste(parts_path[1], "/", parts_path[2], "/new_", parts_path[3] ,sep = "")
if (!file.exists(new_retrieved_data_file)) {
if (length(state) > 1) {
tmp_state <- state[i]
tmp_age   <- age
} else if (length(age) > 1) {
tmp_state <- state
tmp_age   <- age[i]
} else { stop("Error.") }
new_retrieved_data <- reparameterize_model(y = y[[i]], y_current = y_current[[i]], values = values[[i]], current = current[[i]], baseline = baseline, state = tmp_state, age = tmp_age)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y[[i]]         <- new_retrieved_data$y
y_current[[i]] <- new_retrieved_data$y_current
values[[i]]    <- new_retrieved_data$values
current[[i]]   <- new_retrieved_data$current
}
if (ignore_naive_ensemble_data) {
new_tmp_data <- process_data_ignore_models(current = current[[i]], values = values[[i]], idx_models = (1:length(ens_models)))
current[[i]] <- new_tmp_data$current
values[[i]] <- new_tmp_data$values
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y[[i]], values = values[[i]], uncertain_size = uncertain_size)
y[[i]]      <- new_tmp_data$y
values[[i]] <- new_tmp_data$values
}
}
if (length(y) == 16) { tmp_names <- state } else if (length(y) == 6) { tmp_names <- age } else { tmp_names <- NULL }
if (!is.null(tmp_names)) { names(y) <- names(y_current) <- names(values) <- names(current) <- tmp_names }
}
# Make all models comparable: `skip_first_days = 40 + 1`
skip_first_days <- (uncertain_size + 1) + 30
wis_truth <- compute_wis_truth(data = data, truth_data = truth_data, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = skip_first_days)
r
skip_first_days
# Make all models comparable: `skip_first_days = 40 + 1`
skip_first_days <- (uncertain_size + 1) + 30
wis_truth <- compute_wis_truth(data = data, truth_data = truth_data, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = skip_first_days)
df_wis <- wis_truth$df_wis
wis_summ <- wis_truth$wis_summ
# Bar plot
reference_pts <- df_wis %>% group_by(model) %>% mutate(total = sum(wis)) %>% ungroup() %>% select(total) %>% c() %>% unlist() %>% unname() %>% unique() %>% round(2)
if (strata == "all") {
# reference_pts <- c(182.23, 175.92, 125.06, 135.40, 93.67, 137.85, 143.98, 209.49, 81.95, 80.76)
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 220, skip_space = TRUE)
} else {
# Ages
# reference_pts <- c(28.56, 31.77, 22.99, 30.98, 20.60, 23.59, 39.53, 16.28, 16.69)
# States
# reference_pts <- c(17.29, 15.03, 17.56, 16.20, 19.37, 16.13, 22.51, 13.26, 13.50)
if (strata == "states") { ylim_manual <- 25 } else if (strata == "ages") { ylim_manual <- 40 }
wis_bar <- plot_wis_bar_stratified(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = ylim_manual, skip_space = TRUE)
}
wis_bar
reference_pts
# Line plot over the horizons
df_wis_horizon_truth <- compute_wis_horizon_truth(models = models, horizon = horizon, wis_summ = wis_summ)
wis_line_horizon <- plot_wis_line_horizon(df_wis_horizon = df_wis_horizon_truth, models = models, colors = colors)
tmp_ttl <- "" # "WIS (original models)"
p_total <- wis_bar + wis_line_horizon + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10")))
saveRDS(object = p_total, file = paste("PLOTS/WIS_", strata, "_models.RDS", sep = ""))
ggsave(filename = paste("PLOTS/WIS_", strata, "_models.jpeg", sep = ""), plot = p_total, width = 3500, height = 1400, units = c("px"), dpi = 300, bg = "white")
p_all    <- readRDS("PLOTS/WIS_all_models.RDS")    &  plot_annotation(title = "National level") & theme(plot.title = element_text(hjust = 0.5, size = 18))
p_ages   <- readRDS("PLOTS/WIS_ages_models.RDS")   &  plot_annotation(title = "Age groups")     & theme(plot.title = element_text(hjust = 0.5, size = 18))
p_states <- readRDS("PLOTS/WIS_states_models.RDS") &  plot_annotation(title = "States")         & theme(plot.title = element_text(hjust = 0.5, size = 18))
t_all    <- grid::textGrob("National level", gp = gpar(fontfamily = "LM Roman 10", cex = 1.5))
t_ages   <- grid::textGrob("Age groups",     gp = gpar(fontfamily = "LM Roman 10", cex = 1.5))
t_states <- grid::textGrob("States",         gp = gpar(fontfamily = "LM Roman 10", cex = 1.5))
c_all    <- (wrap_elements(panel = t_all)    / p_all)    + plot_layout(heights = c(1, 10))
c_ages   <- (wrap_elements(panel = t_ages)   / p_ages)   + plot_layout(heights = c(1, 10))
c_states <- (wrap_elements(panel = t_states) / p_states) + plot_layout(heights = c(1, 10))
p_total3 <-   wrap_elements(c_all    + plot_annotation(theme = theme(plot.margin = margin(-15, 0, -5, 0)))) /
wrap_elements(c_states + plot_annotation(theme = theme(plot.margin = margin(-15, 0, -5, 0)))) /
wrap_elements(c_ages   + plot_annotation(theme = theme(plot.margin = margin(-15, 0, -5, 0))))
p_total3
ggsave(filename = "PLOTS/WIS_3.jpeg", plot = p_total3, width = 3500, height = 4600, units = c("px"), dpi = 300, bg = "white")
##################################################
###### POST-PROCESSING ###########################
##################################################
# args <- commandArgs(trailingOnly = TRUE)
# skip_recent_days <- as.logical(args[1])
# horiz            <- as.logical(args[2])
# post_select_mod  <- as.character(args[3])
# method           <- as.character(args[4])
# cluster_size     <- as.numeric(args[5])
##################################################
##################################################
###### ENSEMBLE ##################################
##################################################
# args <- commandArgs(trailingOnly = TRUE)
# skip_recent_days <- as.logical(args[1])
# horiz            <- as.logical(args[2])
# method           <- as.character(args[3])
# cluster_size     <- as.numeric(args[4])
##################################################
###### HIGHEST RANKED ############################
##################################################
# args <- commandArgs(trailingOnly = TRUE)
# horiz             <- as.logical(args[1])
# n_ensemble_models <- as.numeric(args[2])
# unweighted_method <- as.character(args[3])
##################################################
##################################################
###### STRATIFIED ANALYSIS #######################
##################################################
# args <- commandArgs(trailingOnly = TRUE)
# ens_method   <- as.character(args[1])
# horiz        <- as.logical(args[2])
# strata       <- as.character(args[3])
# cluster_size <- as.numeric(args[4])
##################################################
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "wis" # c("wis", "pinball", "ranked_unweighted")
skip_recent_days <- FALSE # c(TRUE, FALSE)
training_size <- 90
uncertain_size <- 40
exploratory_wis <- FALSE # Plotting score for all individual and naive ensemble models
ignore_naive_ensemble_data <- TRUE # Remove naive ensembles from the data objects, so the trained models do not take them as inputs
quant <- TRUE # Weights depend (or not) on the quantiles
horiz <- TRUE # Weights depend (or not) on the horizons
post_processing <- FALSE
post_select_mod <- "KIT"
method <- "Mean" # c("Mean", "Median", "all_quant") # How to summarize the recent past
strata <- "ages" # c("states", "ages", "all")
if (strata == "states") {
state_idx <- 1:16
age_idx <- 7
cluster_size <- 64
by <- 0.05
} else if (strata == "ages") {
state_idx <- 17
age_idx <- 1:6
cluster_size <- 32
by <- 0.025
} else {
state_idx <- 17
age_idx <- 7
by <- 0.025
}
########################
# Ranked unweighted pars
n_ensemble_models <- 1 # 1:8
unweighted_method <- "Mean" # c("Mean", "Median")
########################
reparameterize <- TRUE # Model the difference if `TRUE`
cluster_size <- 8
##################################################
# LOAD AND PRE-PROCESS DATA
# `state_idx` and `age_idx` must be selected
##################################################
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
if ((length(state) == 1) & (length(age) == 1)) {
if ((state == "DE") & (age == "00+")) {
idx_missing_model <- -(1:length(models))
} else if ((state == "DE") & (age != "00+")) {
idx_missing_model <- which(models == "RKI")
} else if ((state != "DE") & (age == "00+")) {
idx_missing_model <- which(models == "ILM")
} else { stop("This combination of `state` and `age` does not exist.") }
} else {
if (length(age) != 1) {
idx_missing_model <- which(models == "RKI")
} else if (length(state) != 1) {
idx_missing_model <- which(models == "ILM")
} else { stop("Error.") }
}
models <- models[-idx_missing_model]
colors <- colors[-idx_missing_model]
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
r <- range(data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
KIT_frozen_baseline <- KIT_frozen_baseline %>% filter(forecast_date >= r[1], forecast_date <= r[2], age_group %in% age, location %in% state)
baseline <- KIT_frozen_baseline
if (length(state) == 16) { baseline <- fix_baseline(baseline) }
##################################################
# UNTRAINED ENSEMBLE
# Compute the naive ensemble using `mean` and `median`
##################################################
naive_ensemble_files <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
if (length(naive_ensemble_files) == 1) {
naive_ensemble_file <- naive_ensemble_files[1]
if (file.exists(naive_ensemble_file)) {
naive_ensemble <- readRDS(file = naive_ensemble_file)
} else {
naive_ensemble <- compute_naive_ensemble(data = data, loc = state, age_gr = age)
saveRDS(object = naive_ensemble, file = naive_ensemble_file)
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
if (post_processing) { # Allows post-processing
idx_post <- match(x = post_select_mod, table = models)
if(is.na(idx_post)) { stop("Select a valid model to post-process.") }
ens_models <- models[idx_post]
ens_colors <- colors[idx_post]
}
} else { # Does not allow for post-processing
for (i in 1:length(naive_ensemble_files)) {
naive_ensemble_file <- naive_ensemble_files[i]
if (file.exists(naive_ensemble_file)) { tmp_naive_ensemble <- readRDS(file = naive_ensemble_file) } else { stop("Create files first.") }
if (i == 1) {
naive_ensemble <- tmp_naive_ensemble
} else {
naive_ensemble <- rbind(naive_ensemble, tmp_naive_ensemble)
}
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
}
##################################################
# FORMAT DATA
# Create the objects `y`, `y_current`, `values`, and `current`
##################################################
method_files <- ifelse(method == "all_quant", "all_quant_", "")
retrieved_data_files <- paste("DATA/TRAINING/retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (length(retrieved_data_files) == 1) {
retrieved_data_file <- retrieved_data_files[1]
if (file.exists(retrieved_data_file)) {
retrieved_data <- readRDS(file = retrieved_data_file)
} else {
retrieved_data <- retrieve_data(data = data, truth_data = truth_data, naive_ensemble = naive_ensemble, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = 1, training_size = training_size, method = method)
saveRDS(object = retrieved_data, file = retrieved_data_file)
}
y         <- retrieved_data$y
y_current <- retrieved_data$y_current
values    <- retrieved_data$values
current   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
new_retrieved_data_file <- paste("DATA/TRAINING/new_retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (!file.exists(new_retrieved_data_file)) {
if (method == "all_quant") { tmp_method <- method } else { tmp_method <- NULL }
new_retrieved_data <- reparameterize_model(y = y, y_current = y_current, value = values, current = current, baseline = baseline, method = tmp_method)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y         <- new_retrieved_data$y
y_current <- new_retrieved_data$y_current
values    <- new_retrieved_data$values
current   <- new_retrieved_data$current
}
if (post_processing) { # Select just one model (`ens_models`) for post-processing
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = idx_post)
current <- new_tmp_data$current
values <- new_tmp_data$values
} else {
if (ignore_naive_ensemble_data) { # Remove `Mean` and `Median` from the data objects
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = (1:length(ens_models)))
current <- new_tmp_data$current
values <- new_tmp_data$values
}
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y, values = values, uncertain_size = uncertain_size, method = method)
y      <- new_tmp_data$y
values <- new_tmp_data$values
}
} else { # Does not allow for post-processing (if so, checking the indexing--since there are missing models)
y <- list()
y_current <- list()
values <- list()
current <- list()
for (i in 1:length(retrieved_data_files)) {
print(paste(sprintf("%02d", i), " out of ", sprintf("%02d", length(retrieved_data_files)), sep = ""))
retrieved_data_file <- retrieved_data_files[i]
if (file.exists(retrieved_data_file)) { retrieved_data <- readRDS(file = retrieved_data_file) } else { stop("Create files first.") }
y[[i]]         <- retrieved_data$y
y_current[[i]] <- retrieved_data$y_current
values[[i]]    <- retrieved_data$values
current[[i]]   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
parts_path <- strsplit(retrieved_data_file, "/")[[1]]
new_retrieved_data_file <- paste(parts_path[1], "/", parts_path[2], "/new_", parts_path[3] ,sep = "")
if (!file.exists(new_retrieved_data_file)) {
if (length(state) > 1) {
tmp_state <- state[i]
tmp_age   <- age
} else if (length(age) > 1) {
tmp_state <- state
tmp_age   <- age[i]
} else { stop("Error.") }
new_retrieved_data <- reparameterize_model(y = y[[i]], y_current = y_current[[i]], values = values[[i]], current = current[[i]], baseline = baseline, state = tmp_state, age = tmp_age)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y[[i]]         <- new_retrieved_data$y
y_current[[i]] <- new_retrieved_data$y_current
values[[i]]    <- new_retrieved_data$values
current[[i]]   <- new_retrieved_data$current
}
if (ignore_naive_ensemble_data) {
new_tmp_data <- process_data_ignore_models(current = current[[i]], values = values[[i]], idx_models = (1:length(ens_models)))
current[[i]] <- new_tmp_data$current
values[[i]] <- new_tmp_data$values
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y[[i]], values = values[[i]], uncertain_size = uncertain_size)
y[[i]]      <- new_tmp_data$y
values[[i]] <- new_tmp_data$values
}
}
if (length(y) == 16) { tmp_names <- state } else if (length(y) == 6) { tmp_names <- age } else { tmp_names <- NULL }
if (!is.null(tmp_names)) { names(y) <- names(y_current) <- names(values) <- names(current) <- tmp_names }
}
##################################################
# COMPUTE SCORE
# Compute WIS for all models, given truth final data (exploratory analysis)
##################################################
# Make all models comparable: `skip_first_days = 40 + 1`
skip_first_days <- (uncertain_size + 1) + 30
wis_truth <- compute_wis_truth(data = data, truth_data = truth_data, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = skip_first_days)
df_wis <- wis_truth$df_wis
wis_summ <- wis_truth$wis_summ
# Bar plot
reference_pts <- df_wis %>% group_by(model) %>% mutate(total = sum(wis)) %>% ungroup() %>% select(total) %>% c() %>% unlist() %>% unname() %>% unique() %>% round(2)
if (strata == "all") {
# reference_pts <- c(182.23, 175.92, 125.06, 135.40, 93.67, 137.85, 143.98, 209.49, 81.95, 80.76)
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 220, skip_space = TRUE)
} else {
# Ages
# reference_pts <- c(28.56, 31.77, 22.99, 30.98, 20.60, 23.59, 39.53, 16.28, 16.69)
# States
# reference_pts <- c(14.99, 12.84, 15.26, 13.89, 17.02, 13.83, 20.37, 10.97, 11.19)
if (strata == "states") { ylim_manual <- 25 } else if (strata == "ages") { ylim_manual <- 40 }
wis_bar <- plot_wis_bar_stratified(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = ylim_manual, skip_space = TRUE)
}
wis_bar
