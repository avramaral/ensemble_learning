tmp_obj <- coverage_models$coverage_50[[as.character(models[m])]]
if (is.null(tmp_obj)) { tmp_obj <- 0 }
df_coverage[i, ] <- c(models[m], 0.50, tmp_obj, "50%")
i <- i + 1
}
for (m in 1:length(models)) {
tmp_obj <- coverage_models$coverage_95[[as.character(models[m])]]
if (is.null(tmp_obj)) { tmp_obj <- 0 }
df_coverage[i, ] <- c(models[m], 0.95, tmp_obj, "95%")
i <- i + 1
}
df_coverage$model    <- factor(df_coverage$model, levels = models)
df_coverage$interval <- as.numeric(df_coverage$interval)
df_coverage$value    <- as.numeric(df_coverage$value)
df_coverage$alpha_v  <- factor(df_coverage$alpha_v, levels = names(alphas))
pp <- ggplot() +
geom_col(data = df_coverage[df_coverage$interval == 0.95, ], aes(x = model, y = value, fill = model, alpha = alpha_v)) +
geom_col(data = df_coverage[df_coverage$interval == 0.50, ], aes(x = model, y = value, fill = model, alpha = alpha_v)) +
{ if (!is.null(reference_pts_50)) geom_point(data = reference_pts, aes(x = model, y = c50), pch = 16, size = 3, color = "black", alpha = alphas["50%"]) } +
{ if (!is.null(reference_pts_95)) geom_point(data = reference_pts, aes(x = model, y = c95), pch = 16, size = 3, color = "black", alpha = alphas["95%"]) } +
geom_hline(yintercept = c(0.5, 0.95), linetype = "dashed") +
scale_fill_manual(values = colors_ordered, guide = "none") +
scale_color_manual(values = colors_ordered, guide = "none") +
scale_alpha_manual(values = alphas, labels = names(alphas), guide = guide_legend(reverse = TRUE, title.position = "top", title.hjust = 0.5)) +
scale_x_discrete(limits = rev(models), drop = FALSE) +
labs(x = NULL, y = "Empirical coverage (Averaged all)", color = "Model", alpha = "Prediction interval") +
ylim(c(0, 1)) +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = 16, family = "LM Roman 10"),
axis.ticks.y = element_blank()
)
pp
}
plot_D1 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_DISW_1$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, sub_tt = "")
plot_D1
plot_D4 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_DISW_4$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, sub_tt = " (Averaged over horizons)")
plot_D4
v2 <- TRUE
# Plotting
extra_skip <- 30
if (aggregate_total) { # Aggregated
plot_D1 <- plotting_summarized_weights(w_hat = formatted_w_hat_DISW_1$new_w_hat, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip)
plot_D2 <- plotting_summarized_weights(w_hat = formatted_w_hat_DISW_2$new_w_hat, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip)
plot_D3 <- plotting_summarized_weights(w_hat = formatted_w_hat_DISW_3$new_w_hat, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip)
plot_D4 <- plotting_summarized_weights(w_hat = formatted_w_hat_DISW_4$new_w_hat, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip)
plot_A1 <- plotting_summarized_weights(w_hat = formatted_w_hat_AISW_1$new_w_hat, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, y_max = 1.25)
plot_A2 <- plotting_summarized_weights(w_hat = formatted_w_hat_AISW_2$new_w_hat, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, y_max = 1.25)
plot_A3 <- plotting_summarized_weights(w_hat = formatted_w_hat_AISW_3$new_w_hat, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, y_max = 1.25)
plot_A4 <- plotting_summarized_weights(w_hat = formatted_w_hat_AISW_4$new_w_hat, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, y_max = 1.25)
} else {
if (indep_quant) { # Per quantile
plot_D1 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_DISW_1$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, sub_tt = "")
plot_D2 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_DISW_2$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, sub_tt = "")
plot_D3 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_DISW_3$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, sub_tt = "")
plot_D4 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_DISW_4$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, sub_tt = " (Averaged over horizons)")
plot_A1 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_AISW_1$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, y_max = 1.25, sub_tt = "")
plot_A2 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_AISW_2$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, y_max = 1.25, sub_tt = "")
plot_A3 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_AISW_3$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, y_max = 1.25, sub_tt = "")
plot_A4 <- plotting_quantile_weights_v2(w_hat = formatted_w_hat_AISW_4$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, extra_skip = extra_skip, y_max = 1.25, sub_tt = " (Averaged over horizons)")
} else { # Per horizon
plot_D1 <- plotting_horizon_weights_v2(w_hat = formatted_w_hat_DISW_1$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, big_title = "", extra_skip = extra_skip, all_same = TRUE)
plot_D2 <- plotting_horizon_weights_v2(w_hat = formatted_w_hat_DISW_2$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, big_title = "", extra_skip = extra_skip, all_same = TRUE)
plot_D3 <- plotting_horizon_weights_v2(w_hat = formatted_w_hat_DISW_3$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, big_title = "", extra_skip = extra_skip, all_same = TRUE)
plot_D4 <- plotting_horizon_weights_v2(w_hat = formatted_w_hat_DISW_4$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, big_title = "", extra_skip = extra_skip, all_same = FALSE)
plot_A1 <- plotting_horizon_weights_v2(w_hat = formatted_w_hat_AISW_1$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, big_title = "", extra_skip = extra_skip, y_max = 1.25, all_same = TRUE)
plot_A2 <- plotting_horizon_weights_v2(w_hat = formatted_w_hat_AISW_2$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, big_title = "", extra_skip = extra_skip, y_max = 1.25, all_same = TRUE)
plot_A3 <- plotting_horizon_weights_v2(w_hat = formatted_w_hat_AISW_3$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, big_title = "", extra_skip = extra_skip, y_max = 1.25, all_same = TRUE)
plot_A4 <- plotting_horizon_weights_v2(w_hat = formatted_w_hat_AISW_4$new_w_hat_total, r = rr, models = models_orig, colors = colors_orig, big_title = "", extra_skip = extra_skip, y_max = 1.25, all_same = FALSE)
}
}
dim_f <- function (all_same, ...) {
if (v2 == TRUE) { wi <- 4600; he <- 1375 } else { wi <- 3500; he <- 2500 }
if (!aggregate_total & !indep_quant) {
if (v2 == TRUE) {
if (all_same) {
wi <- 2080 # 1533
he <- 1250
} else {
wi <- 4600; he <- 3500
}
} else { stop("To be defined.") }
}
c(wi, he)
}
dim_same <- dim_f(all_same = TRUE )
dim_vary <- dim_f(all_same = FALSE)
ggsave(filename = paste("PLOTS/weights_D1.jpeg", sep = ""), plot = plot_D1, width = dim_same[1], height = dim_same[2], units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/weights_D1.jpeg", sep = ""), plot = plot_D1, width = dim_same[1], height = dim_same[2], units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/weights_D2.jpeg", sep = ""), plot = plot_D2, width = dim_same[1], height = dim_same[2], units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/weights_D3.jpeg", sep = ""), plot = plot_D3, width = dim_same[1], height = dim_same[2], units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/weights_D4.jpeg", sep = ""), plot = plot_D4, width = dim_vary[1], height = dim_vary[2], units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/weights_A1.jpeg", sep = ""), plot = plot_A1, width = dim_same[1], height = dim_same[2], units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/weights_A2.jpeg", sep = ""), plot = plot_A2, width = dim_same[1], height = dim_same[2], units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/weights_A3.jpeg", sep = ""), plot = plot_A3, width = dim_same[1], height = dim_same[2], units = c("px"), dpi = 300, bg = "white")
ggsave(filename = paste("PLOTS/weights_A4.jpeg", sep = ""), plot = plot_A4, width = dim_vary[1], height = dim_vary[2], units = c("px"), dpi = 300, bg = "white")
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball"
skip_recent_days <- TRUE
method <- "Mean" # c("Mean", "Median", "all_quant")
training_size <- 90
uncertain_size <- 40
quant <- TRUE
horiz <- FALSE
state_idx <- 17
age_idx <- 7
reparameterize <- TRUE
reparameterize_file <- ifelse(reparameterize, "new_", "")
method_files <- ifelse(method == "all_quant", "all_quant_", "")
strata <- "all" # c("states", "ages", "all")
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball"
skip_recent_days <- FALSE
method <- "Mean" # c("Mean", "Median", "all_quant")
training_size <- 90
uncertain_size <- 40
quant <- TRUE
horiz <- TRUE
state_idx <- 17
age_idx <- 7
reparameterize <- TRUE
reparameterize_file <- ifelse(reparameterize, "new_", "")
method_files <- ifelse(method == "all_quant", "all_quant_", "")
strata <- "all" # c("states", "ages", "all")
##################################################
# LOAD AND PRE-PROCESS DATA (ALSO POST-PROCESSED DATA)
# `state_idx` and `age_idx` must be selected (if such data exist)
##################################################
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
##################################################
count <- 1
for (m in models) {
tmp_postprocessed_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/", reparameterize_file, method_files, "post-processing_model_", m, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
tmp_postprocessed_data <- readRDS(file = tmp_postprocessed_file)
tmp_postprocessed_data <- tmp_postprocessed_data$new_data
tmp_postprocessed_data$model <- m
if (count == 1) {
postprocessed_data <- tmp_postprocessed_data
} else {
postprocessed_data <- rbind(postprocessed_data, tmp_postprocessed_data)
}
count <- count + 1
}
cp_postprocessed_data <- postprocessed_data
r <- range(postprocessed_data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
##################################################
# UNTRAINED ENSEMBLE
# Compute the naive ensemble using `mean` and `median` for the post-processed individual models
##################################################
postprocessed_naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/POST_PROCESSED/", reparameterize_file, method_files, "postprocessed_naive_ensemble_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
if (file.exists(postprocessed_naive_ensemble_file)) {
postprocessed_naive_ensemble <- readRDS(file = postprocessed_naive_ensemble_file)
} else {
tmp_postprocessed_data <- postprocessed_data[!(postprocessed_data$model %in% c("Mean", "Median")), ]
postprocessed_naive_ensemble <- compute_naive_ensemble(data = tmp_postprocessed_data, loc = state, age_gr = age)
saveRDS(object = postprocessed_naive_ensemble, file = postprocessed_naive_ensemble_file)
}
postprocessed_data <- postprocessed_data[!(postprocessed_data$model %in% c("Mean", "Median")), ]
postprocessed_data <- rbind(postprocessed_data, postprocessed_naive_ensemble)
##################################################
# COMPUTE SCORE
# Compute WIS for all post-processed models, given truth final data
##################################################
if (strata == "all") { tmp_models <- models[1:8]; tmp_colors <- colors[1:8] } else { tmp_models <- models[1:7]; tmp_colors <- colors[1:7] }
hh <- 0 # 0 # Horizon for the left-most plot
extra_skip <- 30
average <- FALSE # Should daily WIS be aggregated in a MV?
if (!average) { tmp_char <- "raw_commonY_" } else { tmp_char <- "" }
postprocessed_plots_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/PLOTS/postprocessed_", tmp_char, "plots_", method, "_hh_", hh, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
if (file.exists(postprocessed_plots_file)) {
postprocessed_plots <- readRDS(file = postprocessed_plots_file)
} else {
postprocessed_plots <- list()
for (i in 1:length(tmp_models)) {
model <- models[i]
color <- colors[i]
print(paste("Model: ", model, " (", sprintf("%02d", i), "/", sprintf("%02d", length(models)), ").", sep = ""))
postprocessed_plots[[i]] <- plot_postprocessed_models(data = data, nowcasts = cp_postprocessed_data, truth_data = truth_data, model = model, r = r, training_size = training_size, uncertain_size = uncertain_size, hh = hh, ens_method = ens_method, extra_skip = extra_skip, skip_recent_days = skip_recent_days,
average = average)
}
saveRDS(object = postprocessed_plots, file = postprocessed_plots_file)
}
postprocessed_plots_file
hh <- 0 # 0 # Horizon for the left-most plot
extra_skip <- 30
average <- FALSE # Should daily WIS be aggregated in a MV?
if (!average) { tmp_char <- "raw_commonY_" } else { tmp_char <- "" }
postprocessed_plots_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/PLOTS/postprocessed_", tmp_char, "plots_", method, "_hh_", hh, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
(file.exists(postprocessed_plots_file))
postprocessed_plots <- list()
for (i in 1:length(tmp_models)) {
model <- models[i]
color <- colors[i]
print(paste("Model: ", model, " (", sprintf("%02d", i), "/", sprintf("%02d", length(models)), ").", sep = ""))
postprocessed_plots[[i]] <- plot_postprocessed_models(data = data, nowcasts = cp_postprocessed_data, truth_data = truth_data, model = model, r = r, training_size = training_size, uncertain_size = uncertain_size, hh = hh, ens_method = ens_method, extra_skip = extra_skip, skip_recent_days = skip_recent_days,
average = average)
}
plot_postprocessed_models <- function (data, nowcasts, truth_data, model, r, training_size, uncertain_size, hh = 0, ens_method = "wis", horizon = -28:0, probs = c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975), extra_skip = 0, skip_recent_days = FALSE, average = FALSE, ...) {
name_method <- ifelse(ens_method == "wis", "DISW", "ISW")
cmb_models <- c(model, name_method)
cmb_colors <- c(color, "royalblue4")
names(cmb_colors) <- cmb_models
mm <- model
df_nowcast <- nowcasts   |> filter(target == paste(hh, " day ahead inc hosp", sep = ""), type == "quantile", quantile %in% probs, model == mm) |> select(target_end_date, quantile, value, model)
df_nowcast <- df_nowcast |> rename(date = target_end_date)
df_true_dt <- truth_data |> filter(date >= range(df_nowcast$date)[1], date <= range(df_nowcast$date)[2])
for (i in 1:nrow(df_true_dt)) {
for (j in 1:length(unique(df_nowcast$model))) {
df_nowcast <- df_nowcast |> add_row(date = df_true_dt$date[i], quantile = 0, value = df_true_dt$truth[i], model = unique(df_nowcast$model)[j])
}
}
df_nowcast <- df_nowcast |> pivot_wider(names_from = quantile, values_from = value)
alphas <- setNames(c(0.75, 0.4), c("50%", "95%"))
line_colors <- setNames(c("red", "gray"), c("Final", "At time of nowcast"))
p1 <- ggplot(df_nowcast) +
geom_ribbon(aes(x = date, ymin = `0.025`, ymax = `0.975`, alpha = "95%"), fill = "skyblue3") +
geom_ribbon(aes(x = date, ymin = `0.25` , ymax = `0.75`, alpha = "50%"),  fill = "skyblue3") +
geom_line(aes(x = date, y = `0.5`), linetype = "solid", linewidth = 0.5, color = "royalblue4") +
geom_line(aes(x = date, y = `0`, color = "Final"),  linetype = "solid", linewidth = 0.5)  +
labs(x = NULL, y = "COVID-19 7-day hospitalization incidence in Germany", title = paste("Horizon: ", hh, " days (Post-processed ", model, ")", sep = "")) +
scale_alpha_manual(
name = "Nowcasts with \nprediction intervals", values = alphas,
guide = guide_legend(order = 2, title.position = "top", title.hjust = 0)
) +
scale_color_manual(
name = "Truth", values = line_colors,
guide = guide_legend(order = 1, title.position = "top", title.hjust = 0)
) +
scale_y_continuous(breaks = c(5000, 10000, 15000), limits = c(2500, 17500)) +
theme_bw() +
theme(
plot.title = element_text(size = 10, hjust = 0.5, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
legend.key.size = unit(0.65, "lines"),
strip.text = element_text(size = 11, margin = margin(b = 2, t = 2)),
axis.title.y = element_text(size = 11),
axis.text = element_text(size = 11),
axis.ticks = element_line(colour = "black", linewidth = 0.25),
panel.grid.major = element_line(linewidth = 0.15),
panel.grid.minor = element_line(linewidth = 0.1),
plot.margin = unit(c(1, 1.5, 0, 1.5), "pt"),
legend.margin = margin(0, 0, 0, 5),
legend.box.spacing = unit(0, "pt"),
legend.background = element_rect(fill = "transparent"),
text = element_text(family = "LM Roman 10")
)
##################################################
# P2
tmp_data_1 <- data[data$model == model, ]
tmp_data_2 <- nowcasts[nowcasts$model == model, ]
tmp_data_2$model <- name_method
tmp_data_T <- rbind(tmp_data_1, tmp_data_2)
wis_truth <- compute_wis_truth(data = tmp_data_T, truth_data = truth_data, models = cmb_models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = uncertain_size, verbose = FALSE)
df_wis <- wis_truth$df_wis
wis_summ <- wis_truth$wis_summ
df_wis_horizon <- data.frame(model = rep(cmb_models, length(horizon)), horizon = rep(horizon, each = length(cmb_models)), wis = 0)
count <- 1
for (i in 1:length(wis_summ)) {
for (j in 1:length(cmb_models)) {
df_wis_horizon$wis[count] <- wis_summ[[i]][j]
count <- count + 1
}
}
df_wis_horizon[df_wis_horizon$model == name_method, ]$model <- "Post-processed"
df_wis_horizon$model <- factor(df_wis_horizon$model, levels = c(model, "Post-processed"))
names(cmb_colors) <- c(names(cmb_colors)[1], "Post-processed")
##################################################
# P3
cmb_wis <- list()
count <- 1
b <- txtProgressBar(min = 0, max = length(horizon), initial = 0)
for (h in horizon) {
cmb_wis[[as.character(h)]] <- compute_wis_data(data = tmp_data_T, truth_data = truth_data, start_date = r[1], end_date = r[2], horizon = h, models = cmb_models, probs = probs)
count <- count + 1
setTxtProgressBar(b, count)
}
close(b)
total_days <- ifelse(skip_recent_days, (training_size - uncertain_size), training_size)
wis_days <- compute_wis_days(wis = cmb_wis, models = cmb_models, start_date = r[1], end_date = r[2], total_days = total_days, average = average)
if (skip_recent_days) { r_1 <- (r[1] - 40 + 1); r_e <- 0 } else { r_1 <- r[1] + 1; r_e <- 0 }
r_2 <- r[2]
if (average) {
y_lab_temp <- "WIS (Averaged over horizons and M.W. up to 90 days)"
} else {
y_lab_temp <- "WIS (Averaged over horizons)"
}
wis_days[wis_days$model == name_method, ]$model <- "Post-processed"
##################################################
max_y <- max(df_wis_horizon$wis, wis_days$value)
p2 <- ggplot(data = df_wis_horizon, aes(x = horizon, y = wis, color = model)) +
geom_line(linewidth = 1) +
scale_color_manual(NULL, values = cmb_colors) +
labs(x = "Horizon (days)", y = "WIS (Averaged over time points)", color = "Model") +
scale_x_continuous(breaks = 0:5 * -5, minor_breaks = -28:0) +
expand_limits(y = c(0, max_y)) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
strip.text = element_text(size = 11, margin = margin(b = 2, t = 2)),
axis.title.y = element_text(size = 11),
axis.text = element_text(size = 11),
text = element_text(size = 11, family = "LM Roman 10"))
p3 <- ggplot(data = wis_days, aes(x = forecast_date, y = value, color = model)) +
geom_line(linewidth = 1, alpha = rep(ifelse(unique(wis_days$forecast_date) < (r_1 + uncertain_size + 1), 0.25, 1), 2)) +
geom_vline(xintercept = as.numeric(r_1 + uncertain_size + r_e + 1), linetype = "dashed") +
geom_vline(xintercept = as.numeric(r_1 + uncertain_size + r_e + 1 + extra_skip), linetype = "dashed") +
scale_color_manual(NULL, values = cmb_colors) +
expand_limits(y = c(0, max_y)) +
xlim(c(r_1, r_2)) +
labs(x = "", y = y_lab_temp) +
theme_bw() +
theme(legend.position = "none",
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
strip.text = element_text(size = 11, margin = margin(b = 2, t = 2)),
axis.title.y = element_text(size = 11),
axis.text = element_text(size = 11),
text = element_text(size = 11, family = "LM Roman 10"))
##################################################
p_total <- p1 + p2 + p3 + plot_layout(width = c(2, 2, 2)) + plot_annotation(theme = theme(plot.margin = margin()))
list(p1 = p1, p2 = p2, p3 = p3, p_total = p_total)
}
hh <- 0 # 0 # Horizon for the left-most plot
extra_skip <- 30
average <- FALSE # Should daily WIS be aggregated in a MV?
if (!average) { tmp_char <- "raw_commonY_" } else { tmp_char <- "" }
postprocessed_plots_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/PLOTS/postprocessed_", tmp_char, "plots_", method, "_hh_", hh, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
if (file.exists(postprocessed_plots_file)) {
postprocessed_plots <- readRDS(file = postprocessed_plots_file)
} else {
postprocessed_plots <- list()
for (i in 1:length(tmp_models)) {
model <- models[i]
color <- colors[i]
print(paste("Model: ", model, " (", sprintf("%02d", i), "/", sprintf("%02d", length(models)), ").", sep = ""))
postprocessed_plots[[i]] <- plot_postprocessed_models(data = data, nowcasts = cp_postprocessed_data, truth_data = truth_data, model = model, r = r, training_size = training_size, uncertain_size = uncertain_size, hh = hh, ens_method = ens_method, extra_skip = extra_skip, skip_recent_days = skip_recent_days,
average = average)
}
saveRDS(object = postprocessed_plots, file = postprocessed_plots_file)
}
postprocessed_plots[[1]]$p_total
if (skip_recent_days) { tmp_mtd <- "omit recent data" } else if (!skip_recent_days & method == "all_quant") { tmp_mtd <- "full set of quantiles" } else { tmp_mtd <- "plug-in point nowcast" }
tmp_ttl <- paste("Post-processed unweighted ensemble (", ifelse(horiz, "varying weights horizon", "shared weights horizon"), " and ", tmp_mtd, ")", sep = "")
# p_total <- postprocessed_plots[[9]]$p_total / postprocessed_plots[[10]]$p_total + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10")))
for (m in 1:length(tmp_models)) {
ggsave(filename = paste("PLOTS/POSTPROCESS/post_", tmp_char, models[m], "_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, ".jpeg", sep = ""), plot = postprocessed_plots[[m]]$p_total, width = 3500, height = 1400, units = c("px"), dpi = 300, bg = "white")
}
if (skip_recent_days) { tmp_mtd <- "omit recent data" } else if (!skip_recent_days & method == "all_quant") { tmp_mtd <- "full set of quantiles" } else { tmp_mtd <- "plug-in point nowcast" }
tmp_ttl <- paste("Post-processed unweighted ensemble (", ifelse(horiz, "varying weights horizon", "shared weights horizon"), " and ", tmp_mtd, ")", sep = "")
# p_total <- postprocessed_plots[[9]]$p_total / postprocessed_plots[[10]]$p_total + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10")))
for (m in 1:length(tmp_models)) {
ggsave(filename = paste("PLOTS/POSTPROCESS/post_", tmp_char, models[m], "_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, ".jpeg", sep = ""), plot = postprocessed_plots[[m]]$p_total, width = 3500, height = 1400, units = c("px"), dpi = 300, bg = "white")
}
xxx <- postprocessed_plots
hh <- -14 # 0 # Horizon for the left-most plot
extra_skip <- 30
average <- FALSE # Should daily WIS be aggregated in a MV?
models
postprocessed_plots <- list()
i=8
model <- models[i]
color <- colors[i]
print(paste("Model: ", model, " (", sprintf("%02d", i), "/", sprintf("%02d", length(models)), ").", sep = ""))
postprocessed_plots[[i]] <- plot_postprocessed_models(data = data, nowcasts = cp_postprocessed_data, truth_data = truth_data, model = model, r = r, training_size = training_size, uncertain_size = uncertain_size, hh = hh, ens_method = ens_method, extra_skip = extra_skip, skip_recent_days = skip_recent_days,
average = average)
models
p_total <- xxx[[4]] / postprocessed_plots[[8]] ## 0 and (-14) days, respectively (LMU and SZ)
p_total <- xxx[[4]]$p_total / postprocessed_plots[[8]]$p_total ## 0 and (-14) days, respectively (LMU and SZ)
p_total
ggsave(filename = paste("PLOTS/POSTPROCESS/post_", tmp_char, models[m], "_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, "_0_-14.jpeg", sep = ""), plot = postprocessed_plots[[8]]$p_total, width = 3500, height = 1400, units = c("px"), dpi = 300, bg = "white")
p_total_tmp <- xxx[[4]]$p_total / postprocessed_plots[[8]]$p_total ## 0 and (-14) days, respectively (LMU and SZ)
ggsave(filename = paste("PLOTS/POSTPROCESS/post_", tmp_char, models[m], "_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, "_0_-14.jpeg", sep = ""), plot = p_total_tmp, width = 3500, height = 2800, units = c("px"), dpi = 300, bg = "white")
tmp_char
source("header.R")
source("utils.R")
source("aux.R")
training_size <- 90
uncertain_size <- 40
state_idx <- 17
age_idx <- 7
strata <- "all"
reparameterize <- TRUE
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
models_orig <- models
colors_orig <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
models <- c("Mean", "Median", "Post-Mean", "Post-Median", "Mean-Post", "Median-Post", "DISW 1", "DISW 2", "DISW 3", "DISW 4", "AISW 1", "AISW 2", "AISW 3", "AISW 4", "Select-4 Mean", "Select-4 Median")
DISW_colors <- colorRampPalette(c("#8B0000", "#E6ADD8"))(4)
AISW_colors <- colorRampPalette(c("#00008B", "#ADD8E6"))(4)
colors <- c( "#009E73", "#60D1B3", "#FF4500", "#FF7F50", "#9400D3", "#9370DB", DISW_colors, AISW_colors, "#FDDA0D", "#FFFF3F")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
r <- range(data$forecast_date)
reparameterize_file <- ifelse(reparameterize, "new_", "")
post_naive_file <-  "DATA/UNTRAINED_ENSEMBLE/POST_PROCESSED/new_postprocessed_naive_ensemble_size_90_skip_FALSE_state_DE_age_00+_quant_TRUE_horiz_TRUE.RDS"
post_naive <- readRDS(file = post_naive_file)
post_mean   <- post_naive |> filter(model == "Mean")
post_median <- post_naive |> filter(model == "Median")
post_mean$model   <- models[5]
post_median$model <- models[6]
mean_post_file   <- "RESULTS/FITTED_OBJECTS/POST_PROCESSED/new_post-processing_model_Mean_size_90_skip_FALSE_state_DE_age_00+_quant_TRUE_horiz_TRUE.RDS"
median_post_file <- "RESULTS/FITTED_OBJECTS/POST_PROCESSED/new_post-processing_model_Median_size_90_skip_FALSE_state_DE_age_00+_quant_TRUE_horiz_TRUE.RDS"
mean_post   <- readRDS(file = mean_post_file)
median_post <- readRDS(file = median_post_file)
mean_post_ens   <- mean_post$ensemble
median_post_ens <- median_post$ensemble
mean_post   <- mean_post$new_data
median_post <- median_post$new_data
mean_post$model   <- models[3]
median_post$model <- models[4]
DISW_1_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_wis_size_", training_size, "_skip_TRUE_state_", state, "_age_", age, "_quant_TRUE_horiz_FALSE.RDS", sep = "")
DISW_2_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_wis_size_", training_size, "_skip_FALSE_state_", state, "_age_", age, "_quant_TRUE_horiz_FALSE.RDS", sep = "")
DISW_3_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "all_quant_method_wis_size_", training_size, "_skip_FALSE_state_", state, "_age_", age, "_quant_TRUE_horiz_FALSE.RDS", sep = "")
DISW_4_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_wis_size_", training_size, "_skip_FALSE_state_", state, "_age_", age, "_quant_TRUE_horiz_TRUE.RDS", sep = "")
DISW_1 <- readRDS(file = DISW_1_file)
DISW_2 <- readRDS(file = DISW_2_file)
DISW_3 <- readRDS(file = DISW_3_file)
DISW_4 <- readRDS(file = DISW_4_file)
DISW_1_ens <- DISW_1$ensemble
DISW_2_ens <- DISW_2$ensemble
DISW_3_ens <- DISW_3$ensemble
DISW_4_ens <- DISW_4$ensemble
DISW_1 <- DISW_1$new_data
DISW_2 <- DISW_2$new_data
DISW_3 <- DISW_3$new_data
DISW_4 <- DISW_4$new_data
DISW_1$model <- models[7]
DISW_2$model <- models[8]
DISW_3$model <- models[9]
DISW_4$model <- models[10]
AISW_1_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_pinball_size_", training_size, "_skip_TRUE_state_", state, "_age_", age, "_quant_TRUE_horiz_FALSE.RDS", sep = "")
AISW_2_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_pinball_size_", training_size, "_skip_FALSE_state_", state, "_age_", age, "_quant_TRUE_horiz_FALSE.RDS", sep = "")
AISW_3_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "all_quant_method_pinball_size_", training_size, "_skip_FALSE_state_", state, "_age_", age, "_quant_TRUE_horiz_FALSE.RDS", sep = "")
AISW_4_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_pinball_size_", training_size, "_skip_FALSE_state_", state, "_age_", age, "_quant_TRUE_horiz_TRUE.RDS", sep = "")
AISW_1 <- readRDS(file = AISW_1_file)
AISW_2 <- readRDS(file = AISW_2_file)
AISW_3 <- readRDS(file = AISW_3_file)
AISW_4 <- readRDS(file = AISW_4_file)
AISW_1_ens <- AISW_1$ensemble
AISW_2_ens <- AISW_2$ensemble
AISW_3_ens <- AISW_3$ensemble
AISW_4_ens <- AISW_4$ensemble
AISW_1 <- AISW_1$new_data
AISW_2 <- AISW_2$new_data
AISW_3 <- AISW_3$new_data
AISW_4 <- AISW_4$new_data
AISW_4_ens
AISW_4_ens$`2021-11-30`$`-1`
AISW_1_ens$`2021-11-30`$`-1`
AISW_1_ens$`2021-11-30`$`-1`
AISW_1_ens$`2022-01-09`
