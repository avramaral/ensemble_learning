values[[i]]    <- new_retrieved_data$values
current[[i]]   <- new_retrieved_data$current
}
current[[i]][[63]]
current[[i]][[63+10]]
i = 7
print(paste(sprintf("%02d", i), " out of ", sprintf("%02d", length(retrieved_data_files)), sep = ""))
retrieved_data_file <- retrieved_data_files[i]
if (file.exists(retrieved_data_file)) { retrieved_data <- readRDS(file = retrieved_data_file) } else { stop("Create files first.") }
y[[i]]         <- retrieved_data$y
y_current[[i]] <- retrieved_data$y_current
values[[i]]    <- retrieved_data$values
current[[i]]   <- retrieved_data$current
parts_path <- strsplit(retrieved_data_file, "/")[[1]]
new_retrieved_data_file <- paste(parts_path[1], "/", parts_path[2], "/new_", parts_path[3] ,sep = "")
(!file.exists(new_retrieved_data_file))
if (length(state) > 1) {
tmp_state <- state[i]
tmp_age   <- age
} else if (length(age) > 1) {
tmp_state <- state
tmp_age   <- age[i]
} else { stop("Error.") }
tmp_state
tmp_age
current[[i]][63]
y = y[[i]]
y_current = y_current[[i]]
values = values[[i]]
current = current[[i]]
state = tmp_state
age = tmp_age
method
new_y <- list()
new_y_current <- list()
new_values  <- list()
new_current <- list()
for_dates <- names(values)
n_days    <- length(for_dates)
pb <- txtProgressBar(min = 1, max = n_days, initial = 1)
n = 63
d <- for_dates[n]
horizon <- as.numeric(names(values[[as.character(d)]]))
d
new_y[[as.character(d)]]         <- list()
new_y_current[[as.character(d)]] <- list()
new_values[[as.character(d)]]    <- list()
new_current[[as.character(d)]]   <- list()
horizon
h = -28
new_values[[as.character(d)]][[as.character(h)]]  <- list()
new_current[[as.character(d)]][[as.character(h)]] <- list()
avlb_training_size <- length(values[[as.character(d)]][[as.character(h)]])
new_y[[as.character(d)]][[as.character(h)]]
(!is.null(method))
avlb_training_size
values[[as.character(d)]][[as.character(h)]]
for (i in 1:avlb_training_size) {
b <- baseline %>% filter(location == state, age_group == age, forecast_date == (as.Date(d) - i), target == paste(h, " day ahead inc hosp", sep = ""), type == "quantile") %>% select(value) %>% c() %>% unlist() %>% unname()
new_values[[as.character(d)]][[as.character(h)]][[i]] <- values[[as.character(d)]][[as.character(h)]][[i]] - b
if (is.null(method)) {
new_y[[as.character(d)]][[as.character(h)]][i] <- y[[as.character(d)]][[as.character(h)]][i] - b[4]
} else { # For fancy score
new_y[[as.character(d)]][[as.character(h)]][i, ] <- y[[as.character(d)]][[as.character(h)]][i, ] - b[4]
}
}
i
b <- baseline %>% filter(location == state, age_group == age, forecast_date == (as.Date(d) - i), target == paste(h, " day ahead inc hosp", sep = ""), type == "quantile") %>% select(value) %>% c() %>% unlist() %>% unname()
new_values[[as.character(d)]][[as.character(h)]][[i]] <- values[[as.character(d)]][[as.character(h)]][[i]] - b
new_y[[as.character(d)]][[as.character(h)]][i] <- y[[as.character(d)]][[as.character(h)]][i] - b[4]
method = NULL
for (i in 1:avlb_training_size) {
b <- baseline %>% filter(location == state, age_group == age, forecast_date == (as.Date(d) - i), target == paste(h, " day ahead inc hosp", sep = ""), type == "quantile") %>% select(value) %>% c() %>% unlist() %>% unname()
new_values[[as.character(d)]][[as.character(h)]][[i]] <- values[[as.character(d)]][[as.character(h)]][[i]] - b
if (is.null(method)) {
new_y[[as.character(d)]][[as.character(h)]][i] <- y[[as.character(d)]][[as.character(h)]][i] - b[4]
} else { # For fancy score
new_y[[as.character(d)]][[as.character(h)]][i, ] <- y[[as.character(d)]][[as.character(h)]][i, ] - b[4]
}
}
b <- baseline %>% filter(location == state, age_group == age, forecast_date == d, target == paste(h, " day ahead inc hosp", sep = ""), type == "quantile") %>% select(value) %>% c() %>% unlist() %>% unname()
new_current[[as.character(d)]][[as.character(h)]][[1]] <- current[[as.character(d)]][[as.character(h)]][[1]] - b
new_y_current[[as.character(d)]][[as.character(h)]] <- y_current[[as.character(d)]][[as.character(h)]] - b[4]
new_current
new_y_current[[as.character(d)]][[as.character(h)]]
new_current[[as.character(d)]][[as.character(h)]][[1]]
current
current[[as.character(d)]]
current[[as.character(d)]][[as.character(h)]][[1]]
b
baseline
baseline %>% filter(location == state, age_group == age, forecast_date == d, target == paste(h, " day ahead inc hosp", sep = ""), type == "quantile")
baseline %>% filter(location == state, age_group == age, forecast_date == d, sep = ""), type == "quantile")
baseline %>% filter(location == state, age_group == age, forecast_date == d, type == "quantile")
baseline %>% filter(location == state, age_group == age, type == "quantile")
CCC <- baseline %>% filter(location == state, age_group == age, type == "quantile")
CCC$forecast_date %>% range()
d
CCC$forecast_date %>% unique()
CCC$forecast_date %>% unique() %>% sort
CCC$forecast_date %>% unique() %>% sort %>% length()
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
KIT_frozen_baseline %>% filter(location == state, age_group == age, type == "quantile")
KIT_frozen_baseline %>% filter(location == state, age_group == age, type == "quantile") %>% select(forecast_date) %>% unique()
KIT_frozen_baseline %>% filter(location == state, age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c()
KIT_frozen_baseline %>% filter(location == state, age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist()
KIT_frozen_baseline %>% filter(location == state, age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname()
KIT_frozen_baseline %>% filter(location == state, age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length()
KIT_frozen_baseline %>% filter(location == state, age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
strata <- "states" # c("states", "ages", "all")
if (strata == "states") {
state_idx <- 1:16
age_idx <- 7
cluster_size <- 64
} else if (strata == "ages") {
state_idx <- 17
age_idx <- 1:6
cluster_size <- 32
} else {
state_idx <- 17
age_idx <- 7
}
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
state
KIT_frozen_baseline %>% filter(location == state[7], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[6], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[5], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[7], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[8], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[9], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[10], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[11], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[12], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[13], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[14], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[14], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[15], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[16], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
KIT_frozen_baseline %>% filter(location == state[17], age_group == age, type == "quantile") %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname() %>% length() - 7
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
if ((length(state) == 1) & (length(age) == 1)) {
if ((state == "DE") & (age == "00+")) {
idx_missing_model <- -(1:length(models))
} else if ((state == "DE") & (age != "00+")) {
idx_missing_model <- which(models == "RKI")
} else if ((state != "DE") & (age == "00+")) {
idx_missing_model <- which(models == "ILM")
} else { stop("This combination of `state` and `age` does not exist.") }
} else {
if (length(age) != 1) {
idx_missing_model <- which(models == "RKI")
} else if (length(state) != 1) {
idx_missing_model <- which(models == "ILM")
} else { stop("Error.") }
}
models <- models[-idx_missing_model]
colors <- colors[-idx_missing_model]
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
r <- range(data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
KIT_frozen_baseline <- KIT_frozen_baseline %>% filter(forecast_date >= r[1], forecast_date <= r[2], age_group %in% age, location %in% state)
length(state) == 16
fix_baseline
state[7]
baseline %>% filter(location == "DE-HH", age_group == "00+")
aaa<-baseline %>% filter(location == "DE-HH", age_group == "00+")
aaa
aaa$forecast_date
aaa$forecast_date %>% unique()
aaa$forecast_date %>% unique() %>% length()
r
r[2]-r[1] + 1
(seq(r[2], r[1], by = "1 day")) %in% (aaa$forecast_date %>% unique())
(seq(r[2], r[1], by = 1)) %in% (aaa$forecast_date %>% unique())
(seq(r[1], r[2], by = "1 day")) %in% (aaa$forecast_date %>% unique())
(seq(r[1], r[2], by = "1 day"))[c(64, 65, 72)]
missing_dates
m
m <- as.Date(m)
m <- missing_date[1]
m <- missing_dates[1]
missing_dates <- c("2022-01-31", "2022-02-01", "2022-02-08")
m <- missing_dates[1]
m
m = 1
m <- as.Date(missing_dates[m])
m
baseline %>% filter(location == "DE-HH", age_group == "00+", forecast_date == m)
baseline %>% filter(location == "DE-HH", age_group == "00+", forecast_date == (m - 1))
baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == m, ]
baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == (m-1), ]
previous
m <- as.Date(missing_dates[m])
previous <- ifelse(m == as.Date("2022-02-01"), 2, 1)
previous
m == as.Date("2022-02-01")
m
m = 1
m <- as.Date(missing_dates[m])
previous <- ifelse(m == as.Date("2022-02-01"), 2, 1)
previous
baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == m, ] <- baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == (m - previous), ]
baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == (m - previous), ]
base_tmp <- baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == (m - previous), ]
base_tmp
base_tmp$forecast_date
base_tmp
base_tmp$target_end_date <- base_tmp$target_end_date + previous
base_tmp
base_tmp$forecast_date - base_tmp$target_end_date
baseline
m <- as.Date(missing_dates[m])
previous <- ifelse(m == as.Date("2022-02-01"), 2, 1)
base_tmp <- baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == (m - previous), ]
base_tmp$forecast_date <- base_tmp$forecast_date + previous
base_tmp$target_end_date <- base_tmp$target_end_date + previous
base_tmp$forecast_date - base_tmp$target_end_date
base_tmp
m = 1
m <- as.Date(missing_dates[m])
previous <- ifelse(m == as.Date("2022-02-01"), 2, 1)
base_tmp <- baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == (m - previous), ]
base_tmp$forecast_date <- base_tmp$forecast_date + previous
base_tmp$target_end_date <- base_tmp$target_end_date + previous
base_tmp$forecast_date - base_tmp$target_end_date
baseline$forecast_date - baseline$target_end_date
baseline
rbind(baseline, base_tmp) %>% sort(location, age_group, forecast_date, target_end_date)
rbind(baseline, base_tmp) %>% sort(c("location", "age_group", "forecast_date", "target_end_date"))
rbind(baseline, base_tmp) %>% arrange(location, age_group, forecast_date, target_end_date)
m = 2
m <- as.Date(missing_dates[m])
previous <- ifelse(m == as.Date("2022-02-01"), 2, 1)
base_tmp <- baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == (m - previous), ]
base_tmp$forecast_date <- base_tmp$forecast_date + previous
base_tmp$target_end_date <- base_tmp$target_end_date + previous
base_tmp$forecast_date - base_tmp$target_end_date
previous
fix_baseline <- function (baseline, ...) {
# Fix the missing data for "DE-HH" with the most recent available count
missing_dates <- c("2022-01-31", "2022-02-01", "2022-02-08")
for (m in 1:length(missing_dates)) {
m <- as.Date(missing_dates[m])
previous <- ifelse(m == as.Date("2022-02-01"), 2, 1)
base_tmp <- baseline[baseline$location == "DE-HH" & baseline$age_group == "00+" & baseline$forecast_date == (m - previous), ]
base_tmp$forecast_date <- base_tmp$forecast_date + previous
base_tmp$target_end_date <- base_tmp$target_end_date + previous
baseline <- rbind(baseline, base_tmp) %>% arrange(location, age_group, forecast_date, target_end_date)
}
baseline
}
##################################################
###### POST-PROCESSING ###########################
##################################################
# args <- commandArgs(trailingOnly = TRUE)
# skip_recent_days <- as.logical(args[1])
# horiz            <- as.logical(args[2])
# post_select_mod  <- as.character(args[3])
# method           <- as.character(args[4])
# cluster_size     <- as.numeric(args[5])
##################################################
##################################################
###### ENSEMBLE ##################################
##################################################
# args <- commandArgs(trailingOnly = TRUE)
# skip_recent_days <- as.logical(args[1])
# horiz            <- as.logical(args[2])
# method           <- as.character(args[3])
# cluster_size     <- as.numeric(args[4])
##################################################
###### HIGHEST RANKED ############################
##################################################
# args <- commandArgs(trailingOnly = TRUE)
# horiz             <- as.logical(args[1])
# n_ensemble_models <- as.numeric(args[2])
# unweighted_method <- as.character(args[3])
##################################################
##################################################
###### STRATIFIED ANALYSIS #######################
##################################################
# args <- commandArgs(trailingOnly = TRUE)
# strata <- as.character(args[1])
##################################################
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "wis" # c("wis", "pinball", "ranked_unweighted")
skip_recent_days <- FALSE # c(TRUE, FALSE)
training_size <- 90
uncertain_size <- 40
exploratory_wis <- FALSE # Plotting score for all individual and naive ensemble models
ignore_naive_ensemble_data <- TRUE # Remove naive ensembles from the data objects, so the trained models do not take them as inputs
quant <- TRUE # Weights depend (or not) on the quantiles
horiz <- TRUE # Weights depend (or not) on the horizons
post_processing <- FALSE
post_select_mod <- "KIT"
method <- "Mean" # c("Mean", "Median", "all_quant") # How to summarize the recent past
strata <- "states" # c("states", "ages", "all")
if (strata == "states") {
state_idx <- 1:16
age_idx <- 7
cluster_size <- 64
} else if (strata == "ages") {
state_idx <- 17
age_idx <- 1:6
cluster_size <- 32
} else {
state_idx <- 17
age_idx <- 7
}
########################
# Ranked unweighted pars
n_ensemble_models <- 1 # 1:8
unweighted_method <- "Mean" # c("Mean", "Median")
########################
reparameterize <- TRUE # Model the difference if `TRUE`
cluster_size <- 4
##################################################
# LOAD AND PRE-PROCESS DATA
# `state_idx` and `age_idx` must be selected
##################################################
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
KIT_frozen_baseline <- data %>% filter(model == "KIT-frozen_baseline")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
if ((length(state) == 1) & (length(age) == 1)) {
if ((state == "DE") & (age == "00+")) {
idx_missing_model <- -(1:length(models))
} else if ((state == "DE") & (age != "00+")) {
idx_missing_model <- which(models == "RKI")
} else if ((state != "DE") & (age == "00+")) {
idx_missing_model <- which(models == "ILM")
} else { stop("This combination of `state` and `age` does not exist.") }
} else {
if (length(age) != 1) {
idx_missing_model <- which(models == "RKI")
} else if (length(state) != 1) {
idx_missing_model <- which(models == "ILM")
} else { stop("Error.") }
}
models <- models[-idx_missing_model]
colors <- colors[-idx_missing_model]
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
r <- range(data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
KIT_frozen_baseline <- KIT_frozen_baseline %>% filter(forecast_date >= r[1], forecast_date <= r[2], age_group %in% age, location %in% state)
baseline <- KIT_frozen_baseline
if (length(state) == 16) { baseline <- fix_baseline(baseline) }
baseline
baseline %>% filter(location == state[7], age_group == age)
baseline %>% filter(location == state[7], age_group == age) %>% select(forecast_date) %>% c() %>% unlist() %>% unname()
baseline %>% filter(location == state[7], age_group == age) %>% select(forecast_date) %>% unique() %>% c() %>% unlist() %>% unname()
naive_ensemble_files <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
if (length(naive_ensemble_files) == 1) {
naive_ensemble_file <- naive_ensemble_files[1]
if (file.exists(naive_ensemble_file)) {
naive_ensemble <- readRDS(file = naive_ensemble_file)
} else {
naive_ensemble <- compute_naive_ensemble(data = data, loc = state, age_gr = age)
saveRDS(object = naive_ensemble, file = naive_ensemble_file)
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
if (post_processing) { # Allows post-processing
idx_post <- match(x = post_select_mod, table = models)
if(is.na(idx_post)) { stop("Select a valid model to post-process.") }
ens_models <- models[idx_post]
ens_colors <- colors[idx_post]
}
} else { # Does not allow for post-processing
for (i in 1:length(naive_ensemble_files)) {
naive_ensemble_file <- naive_ensemble_files[i]
if (file.exists(naive_ensemble_file)) { tmp_naive_ensemble <- readRDS(file = naive_ensemble_file) } else { stop("Create files first.") }
if (i == 1) {
naive_ensemble <- tmp_naive_ensemble
} else {
naive_ensemble <- rbind(naive_ensemble, tmp_naive_ensemble)
}
}
data <- rbind(data, naive_ensemble)
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
}
method_files <- ifelse(method == "all_quant", "all_quant_", "")
retrieved_data_files <- paste("DATA/TRAINING/retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
retrieved_data_files
method_files <- ifelse(method == "all_quant", "all_quant_", "")
retrieved_data_files <- paste("DATA/TRAINING/retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (length(retrieved_data_files) == 1) {
retrieved_data_file <- retrieved_data_files[1]
if (file.exists(retrieved_data_file)) {
retrieved_data <- readRDS(file = retrieved_data_file)
} else {
retrieved_data <- retrieve_data(data = data, truth_data = truth_data, naive_ensemble = naive_ensemble, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = 1, training_size = training_size, method = method)
saveRDS(object = retrieved_data, file = retrieved_data_file)
}
y         <- retrieved_data$y
y_current <- retrieved_data$y_current
values    <- retrieved_data$values
current   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
new_retrieved_data_file <- paste("DATA/TRAINING/new_retrieved_data_", method_files, "training_size_", training_size, "_state_", state, "_age_", age, ".RDS", sep = "")
if (!file.exists(new_retrieved_data_file)) {
new_retrieved_data <- reparameterize_model(y = y, y_current = y_current, value = values, current = current, baseline = baseline, method = ifelse(method == "all_quant", "all_quant", NULL))
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y         <- new_retrieved_data$y
y_current <- new_retrieved_data$y_current
values    <- new_retrieved_data$values
current   <- new_retrieved_data$current
}
if (post_processing) { # Select just one model (`ens_models`) for post-processing
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = idx_post)
current <- new_tmp_data$current
values <- new_tmp_data$values
} else {
if (ignore_naive_ensemble_data) { # Remove `Mean` and `Median` from the data objects
new_tmp_data <- process_data_ignore_models(current = current, values = values, idx_models = (1:length(ens_models)))
current <- new_tmp_data$current
values <- new_tmp_data$values
}
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y, values = values, uncertain_size = uncertain_size, method = method)
y      <- new_tmp_data$y
values <- new_tmp_data$values
}
} else { # Does not allow for post-processing (if so, checking the indexing--since there are missing models)
y <- list()
y_current <- list()
values <- list()
current <- list()
for (i in 1:length(retrieved_data_files)) {
print(paste(sprintf("%02d", i), " out of ", sprintf("%02d", length(retrieved_data_files)), sep = ""))
retrieved_data_file <- retrieved_data_files[i]
if (file.exists(retrieved_data_file)) { retrieved_data <- readRDS(file = retrieved_data_file) } else { stop("Create files first.") }
y[[i]]         <- retrieved_data$y
y_current[[i]] <- retrieved_data$y_current
values[[i]]    <- retrieved_data$values
current[[i]]   <- retrieved_data$current
if (reparameterize) { # Reparameterize the model
parts_path <- strsplit(retrieved_data_file, "/")[[1]]
new_retrieved_data_file <- paste(parts_path[1], "/", parts_path[2], "/new_", parts_path[3] ,sep = "")
if (!file.exists(new_retrieved_data_file)) {
if (length(state) > 1) {
tmp_state <- state[i]
tmp_age   <- age
} else if (length(age) > 1) {
tmp_state <- state
tmp_age   <- age[i]
} else { stop("Error.") }
new_retrieved_data <- reparameterize_model(y = y[[i]], y_current = y_current[[i]], values = values[[i]], current = current[[i]], baseline = baseline, state = tmp_state, age = tmp_age)
saveRDS(object = new_retrieved_data, file = new_retrieved_data_file)
} else {
new_retrieved_data <- readRDS(file = new_retrieved_data_file)
}
y[[i]]         <- new_retrieved_data$y
y_current[[i]] <- new_retrieved_data$y_current
values[[i]]    <- new_retrieved_data$values
current[[i]]   <- new_retrieved_data$current
}
if (ignore_naive_ensemble_data) {
new_tmp_data <- process_data_ignore_models(current = current[[i]], values = values[[i]], idx_models = (1:length(ens_models)))
current[[i]] <- new_tmp_data$current
values[[i]] <- new_tmp_data$values
}
if (skip_recent_days) {
new_tmp_data <- process_data_skip_days(y = y[[i]], values = values[[i]], uncertain_size = uncertain_size)
y[[i]]      <- new_tmp_data$y
values[[i]] <- new_tmp_data$values
}
}
if (length(y) == 16) { tmp_names <- state } else if (length(y) == 6) { tmp_names <- age } else { tmp_names <- NULL }
if (!is.null(tmp_names)) { names(y) <- names(y_current) <- names(values) <- names(current) <- tmp_names }
}
