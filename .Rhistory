models <- c("(60) DISW 4", "(90) DISW 4", "(ALL) DISW 4", "Mean", "Median")
colors <- c("red", "blue", "yellow", "#009E73", "#60D1B3")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
r <- range(data$forecast_date)
##################################################
reparameterize_file <- ifelse(reparameterize, "new_", "")
# DISW
DISW_4_1_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_wis_size_60_skip_FALSE_state_",  state, "_age_", age, "_quant_TRUE_horiz_TRUE.RDS", sep = "")
DISW_4_2_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_wis_size_90_skip_FALSE_state_",  state, "_age_", age, "_quant_TRUE_horiz_TRUE.RDS", sep = "")
DISW_4_3_file <- paste("RESULTS/FITTED_OBJECTS/", reparameterize_file, "method_wis_size_200_skip_FALSE_state_", state, "_age_", age, "_quant_TRUE_horiz_TRUE.RDS", sep = "")
DISW_4_1 <- readRDS(file = DISW_4_1_file)
DISW_4_2 <- readRDS(file = DISW_4_2_file)
DISW_4_3 <- readRDS(file = DISW_4_3_file)
DISW_4_1_ens <- DISW_4_1$ensemble
DISW_4_2_ens <- DISW_4_2$ensemble
DISW_4_3_ens <- DISW_4_3$ensemble
DISW_4_1 <- DISW_4_1$new_data
DISW_4_2 <- DISW_4_2$new_data
DISW_4_3 <- DISW_4_3$new_data
DISW_4_1$model <- models[1]
DISW_4_2$model <- models[2]
DISW_4_3$model <- models[3]
##########
##########
naive_ensemble <- naive_ensemble[!(naive_ensemble$type == "mean"), ]
ensemble_data <- rbind(naive_ensemble, DISW_4_1, DISW_4_2, DISW_4_3)
r <- range(DISW_4_1$forecast_date)
ensemble_data <- ensemble_data[(ensemble_data$forecast_date >= r[1]) & (ensemble_data$forecast_date <= r[2]), ]
ensemble_data$model <- factor(x = ensemble_data$model, levels = models)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
##################################################
# COMPUTE SCORE
# Compute WIS for all post-processed models, given truth final data
##################################################
# Extra gap
skip_first_days <- 30 + uncertain_size
# Make all models comparable with `skip_first_days`
wis_truth <- compute_wis_truth(data = ensemble_data, truth_data = truth_data, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = skip_first_days)
df_wis <- wis_truth$df_wis
wis_summ <- wis_truth$wis_summ
# Bar plot
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = FALSE)
# Line plot over the horizons
df_wis_horizon_truth <- compute_wis_horizon_truth(models = models, horizon = horizon, wis_summ = wis_summ)
wis_line_horizon <- plot_wis_line_horizon(df_wis_horizon = df_wis_horizon_truth, models = models, colors = colors)
tmp_ttl <- "" # "WIS (weighted ensemble)"
p_total <- wis_bar + wis_line_horizon + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10")))
saveRDS(object = p_total, file = paste("PLOTS/ENSEMBLE/DIFFERENT_TRAINING_SIZE/WIS_different_training.RDS", sep = ""))
ggsave(filename = paste("PLOTS/ENSEMBLE/DIFFERENT_TRAINING_SIZE/WIS_different_training.jpeg", sep = ""), plot = p_total, width = 3500, height = 1400, units = c("px"), dpi = 300, bg = "white")
# Bar plot
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE)
plot_wis_bar_size <- function (df_wis, wis_summ, models, colors, ylim_manual = 100, skip_space = TRUE, ...) {
# Compute the total WIS based on the 3-part decomposition
df_wis_total <- data.frame(model = rep(NA, length(models)), wis = rep(NA, length(models)))
df_wis_total$model <- models
df_wis_total$model <- factor(x = df_wis_total$model, levels = models)
df_wis_total$wis <- Reduce(`+`, wis_summ) / length(wis_summ)
if (skip_space) {
df_wis$model <- as.character(df_wis$model)
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "sprd"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "over"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "undr"))
df_wis$model <- factor(x = df_wis$model, levels = c(models[1:3], "space", models[4:5]), labels = c(models[1:3], "space", models[4:5]))
df_wis$wis <- as.numeric(df_wis$wis)
}
if (skip_space) {
colors_ordered <- c(colors[1:3], "cyan", colors[4:5])
names(colors_ordered) <- c(models[1:3], "space", models[4:5])
} else {
colors_ordered <- colors
names(colors_ordered) <- models
}
pp <- ggplot() +
geom_bar(data = df_wis, aes(x = model, y = wis), fill = "white", stat = "identity") +
geom_bar(data = df_wis, aes(x = model, y = wis, fill = model, alpha = component, color = model), stat = "identity") +
geom_label(
data = df_wis_total, aes(x = model, y = 0.5 * as.numeric(wis), label = sprintf("%0.2f", round(as.numeric(wis), digits = 2))),
fill = "white", alpha = 1, hjust = 0.5,
label.r = unit(0.15, "lines"),
size = 10 / .pt,
family = "LM Roman 10",
label.padding = unit(0.2, "lines")
) +
{ if (!is.null(reference_pts) & skip_space) geom_point(data = reference_pts, aes(x = model, y = value), pch = 5, size = 2) } +
scale_fill_manual(values = colors_ordered, guide = "none") +
scale_color_manual(values = colors_ordered, guide = "none") +
scale_alpha_manual(
values = c(0.5, 0.2, 1.0),
labels = c("Overprediction", "Spread", "Underprediction"),
guide = guide_legend(reverse = TRUE, title.position = "top", title.hjust = 0.5)
) +
{ if ( skip_space) scale_x_discrete(limits = rev(c(models[1:8], "space", models[9:10])), labels = rev(c(models[1:8], " ", models[9:10])), drop = FALSE) } +
{ if (!skip_space) scale_x_discrete(limits = rev(models), drop = FALSE) } +
labs(x = NULL, y = "WIS (Averaged over time points and horizons)", color = "Model", alpha = "Decomposition of WIS") +
ylim(0, ylim_manual) +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = 16, family = "LM Roman 10"),
axis.ticks.y = element_blank()
)
pp
}
# Bar plot
wis_bar <- plot_wis_bar_size(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE)
# Compute the total WIS based on the 3-part decomposition
df_wis_total <- data.frame(model = rep(NA, length(models)), wis = rep(NA, length(models)))
plot_wis_bar_size <- function (df_wis, wis_summ, models, colors, ylim_manual = 100, skip_space = TRUE, ...) {
# Compute the total WIS based on the 3-part decomposition
df_wis_total <- data.frame(model = rep(NA, length(models)), wis = rep(NA, length(models)))
df_wis_total$model <- models
df_wis_total$model <- factor(x = df_wis_total$model, levels = models)
df_wis_total$wis <- Reduce(`+`, wis_summ) / length(wis_summ)
if (skip_space) {
df_wis$model <- as.character(df_wis$model)
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "sprd"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "over"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "undr"))
df_wis$model <- factor(x = df_wis$model, levels = c(models[1:3], "space", models[4:5]), labels = c(models[1:3], "space", models[4:5]))
df_wis$wis <- as.numeric(df_wis$wis)
}
if (skip_space) {
colors_ordered <- c(colors[1:3], "cyan", colors[4:5])
names(colors_ordered) <- c(models[1:3], "space", models[4:5])
} else {
colors_ordered <- colors
names(colors_ordered) <- models
}
pp <- ggplot() +
geom_bar(data = df_wis, aes(x = model, y = wis), fill = "white", stat = "identity") +
geom_bar(data = df_wis, aes(x = model, y = wis, fill = model, alpha = component, color = model), stat = "identity") +
geom_label(
data = df_wis_total, aes(x = model, y = 0.5 * as.numeric(wis), label = sprintf("%0.2f", round(as.numeric(wis), digits = 2))),
fill = "white", alpha = 1, hjust = 0.5,
label.r = unit(0.15, "lines"),
size = 10 / .pt,
family = "LM Roman 10",
label.padding = unit(0.2, "lines")
) +
scale_fill_manual(values = colors_ordered, guide = "none") +
scale_color_manual(values = colors_ordered, guide = "none") +
scale_alpha_manual(
values = c(0.5, 0.2, 1.0),
labels = c("Overprediction", "Spread", "Underprediction"),
guide = guide_legend(reverse = TRUE, title.position = "top", title.hjust = 0.5)
) +
{ if ( skip_space) scale_x_discrete(limits = rev(c(models[1:8], "space", models[9:10])), labels = rev(c(models[1:8], " ", models[9:10])), drop = FALSE) } +
{ if (!skip_space) scale_x_discrete(limits = rev(models), drop = FALSE) } +
labs(x = NULL, y = "WIS (Averaged over time points and horizons)", color = "Model", alpha = "Decomposition of WIS") +
ylim(0, ylim_manual) +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = 16, family = "LM Roman 10"),
axis.ticks.y = element_blank()
)
pp
}
# Bar plot
wis_bar <- plot_wis_bar_size(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE)
wis_bar
df_wis_total
plot_wis_bar_size <- function (df_wis, wis_summ, models, colors, ylim_manual = 100, skip_space = TRUE, ...) {
# Compute the total WIS based on the 3-part decomposition
df_wis_total <- data.frame(model = rep(NA, length(models)), wis = rep(NA, length(models)))
df_wis_total$model <- models
df_wis_total$model <- factor(x = df_wis_total$model, levels = models)
df_wis_total$wis <- Reduce(`+`, wis_summ) / length(wis_summ)
if (skip_space) {
df_wis$model <- as.character(df_wis$model)
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "sprd"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "over"))
df_wis <- rbind(df_wis, c(as.factor("space"), 0, "undr"))
df_wis$model <- factor(x = df_wis$model, levels = c(models[1:3], "space", models[4:5]), labels = c(models[1:3], "space", models[4:5]))
df_wis$wis <- as.numeric(df_wis$wis)
}
if (skip_space) {
colors_ordered <- c(colors[1:3], "cyan", colors[4:5])
names(colors_ordered) <- c(models[1:3], "space", models[4:5])
} else {
colors_ordered <- colors
names(colors_ordered) <- models
}
pp <- ggplot() +
geom_bar(data = df_wis, aes(x = model, y = wis), fill = "white", stat = "identity") +
geom_bar(data = df_wis, aes(x = model, y = wis, fill = model, alpha = component, color = model), stat = "identity") +
geom_label(
data = df_wis_total, aes(x = model, y = 0.5 * as.numeric(wis), label = sprintf("%0.2f", round(as.numeric(wis), digits = 2))),
fill = "white", alpha = 1, hjust = 0.5,
label.r = unit(0.15, "lines"),
size = 10 / .pt,
family = "LM Roman 10",
label.padding = unit(0.2, "lines")
) +
scale_fill_manual(values = colors_ordered, guide = "none") +
scale_color_manual(values = colors_ordered, guide = "none") +
scale_alpha_manual(
values = c(0.5, 0.2, 1.0),
labels = c("Overprediction", "Spread", "Underprediction"),
guide = guide_legend(reverse = TRUE, title.position = "top", title.hjust = 0.5)
) +
{ if ( skip_space) scale_x_discrete(limits = rev(c(models[1:3], "space", models[4:5])), labels = rev(c(models[1:3], " ", models[4:5])), drop = FALSE) } +
{ if (!skip_space) scale_x_discrete(limits = rev(models), drop = FALSE) } +
labs(x = NULL, y = "WIS (Averaged over time points and horizons)", color = "Model", alpha = "Decomposition of WIS") +
ylim(0, ylim_manual) +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom", text = element_text(size = 16, family = "LM Roman 10"),
axis.ticks.y = element_blank()
)
pp
}
# Bar plot
wis_bar <- plot_wis_bar_size(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE)
wis_bar
# Bar plot
wis_bar <- plot_wis_bar_size(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE)
# Line plot over the horizons
df_wis_horizon_truth <- compute_wis_horizon_truth(models = models, horizon = horizon, wis_summ = wis_summ)
wis_line_horizon <- plot_wis_line_horizon(df_wis_horizon = df_wis_horizon_truth, models = models, colors = colors)
tmp_ttl <- "" # "WIS (weighted ensemble)"
p_total <- wis_bar + wis_line_horizon + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10")))
saveRDS(object = p_total, file = paste("PLOTS/ENSEMBLE/DIFFERENT_TRAINING_SIZE/WIS_different_training.RDS", sep = ""))
ggsave(filename = paste("PLOTS/ENSEMBLE/DIFFERENT_TRAINING_SIZE/WIS_different_training.jpeg", sep = ""), plot = p_total, width = 3500, height = 900, units = c("px"), dpi = 300, bg = "white")
# Bar plot
wis_bar <- plot_wis_bar_size(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 100, skip_space = TRUE)
# Line plot over the horizons
df_wis_horizon_truth <- compute_wis_horizon_truth(models = models, horizon = horizon, wis_summ = wis_summ)
wis_line_horizon <- plot_wis_line_horizon(df_wis_horizon = df_wis_horizon_truth, models = models, colors = colors)
tmp_ttl <- "" # "WIS (weighted ensemble)"
p_total <- wis_bar + wis_line_horizon + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10")))
saveRDS(object = p_total, file = paste("PLOTS/ENSEMBLE/DIFFERENT_TRAINING_SIZE/WIS_different_training.RDS", sep = ""))
ggsave(filename = paste("PLOTS/ENSEMBLE/DIFFERENT_TRAINING_SIZE/WIS_different_training.jpeg", sep = ""), plot = p_total, width = 3500, height = 1400, units = c("px"), dpi = 300, bg = "white")
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball"
skip_recent_days <- FALSE
method <- "Mean" # c("Mean", "Median", "all_quant")
training_size <- 60
uncertain_size <- 40
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball"
skip_recent_days <- FALSE
method <- "Mean" # c("Mean", "Median", "all_quant")
training_size <- 60
uncertain_size <- 40
quant <- TRUE
horiz <- TRUE
state_idx <- 17
age_idx <- 7
reparameterize <- TRUE
reparameterize_file <- ifelse(reparameterize, "new_", "")
method_files <- ifelse(method == "all_quant", "all_quant_", "")
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
count <- 1
for (m in models) {
tmp_postprocessed_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/", reparameterize_file, method_files, "post-processing_model_", m, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
tmp_postprocessed_data <- readRDS(file = tmp_postprocessed_file)
tmp_postprocessed_data <- tmp_postprocessed_data$new_data
tmp_postprocessed_data$model <- m
if (count == 1) {
postprocessed_data <- tmp_postprocessed_data
} else {
postprocessed_data <- rbind(postprocessed_data, tmp_postprocessed_data)
}
count <- count + 1
}
horiz <- FALSE
state_idx <- 17
age_idx <- 7
reparameterize <- TRUE
reparameterize_file <- ifelse(reparameterize, "new_", "")
method_files <- ifelse(method == "all_quant", "all_quant_", "")
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
count <- 1
for (m in models) {
tmp_postprocessed_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/", reparameterize_file, method_files, "post-processing_model_", m, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
tmp_postprocessed_data <- readRDS(file = tmp_postprocessed_file)
tmp_postprocessed_data <- tmp_postprocessed_data$new_data
tmp_postprocessed_data$model <- m
if (count == 1) {
postprocessed_data <- tmp_postprocessed_data
} else {
postprocessed_data <- rbind(postprocessed_data, tmp_postprocessed_data)
}
count <- count + 1
}
source("header.R")
source("utils.R")
source("aux.R")
ens_method <- "pinball"
skip_recent_days <- FALSE
method <- "Mean" # c("Mean", "Median", "all_quant")
training_size <- 60
uncertain_size <- 40
quant <- TRUE
horiz <- TRUE
state_idx <- 17
age_idx <- 7
reparameterize <- TRUE
reparameterize_file <- ifelse(reparameterize, "new_", "")
method_files <- ifelse(method == "all_quant", "all_quant_", "")
##################################################
# LOAD AND PRE-PROCESS DATA (ALSO POST-PROCESSED DATA)
# `state_idx` and `age_idx` must be selected (if such data exist)
##################################################
data <- read_csv(file = "DATA/data.csv.gz")
truth_data <- read_csv(file = "DATA/truth_40d.csv.gz")
state <- unique(data$location)
state <- c(state, "DE")
state <- state[2:length(state)][state_idx]
age <- unique(data$age_group)
age <- c(age, "00+")
age <- age[2:length(age)][age_idx]
models <- c("Epiforecasts", "ILM", "KIT", "LMU", "RIVM", "RKI", "SU", "SZ")
colors <- c("#B30000", "#E69F00", "#56B4E9", "#F0E442", "#80471C", "#3C4AAD", "#CC79A7", "#000000")
ens_models <- models
ens_colors <- colors
filtered_data <- filter_data(data = data, truth_data = truth_data, models = models, loc = state, age_gr = age, extra_delay = 7, truth_past = training_size)
data <- filtered_data$data
truth_data <- filtered_data$truth_data
models <- c(models, "Mean", "Median")
colors <- c(colors, "#009E73", "#60D1B3")
naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/naive_ensemble_state_", state, "_age_", age, ".RDS", sep = "")
naive_ensemble <- readRDS(file = naive_ensemble_file)
data <- rbind(data, naive_ensemble)
##################################################
count <- 1
for (m in models) {
tmp_postprocessed_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/", reparameterize_file, method_files, "post-processing_model_", m, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
tmp_postprocessed_data <- readRDS(file = tmp_postprocessed_file)
tmp_postprocessed_data <- tmp_postprocessed_data$new_data
tmp_postprocessed_data$model <- m
if (count == 1) {
postprocessed_data <- tmp_postprocessed_data
} else {
postprocessed_data <- rbind(postprocessed_data, tmp_postprocessed_data)
}
count <- count + 1
}
count <- 1
for (m in models) {
tmp_postprocessed_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/", reparameterize_file, method_files, "post-processing_model_", m, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
tmp_postprocessed_data <- readRDS(file = tmp_postprocessed_file)
tmp_postprocessed_data <- tmp_postprocessed_data$new_data
tmp_postprocessed_data$model <- m
if (count == 1) {
postprocessed_data <- tmp_postprocessed_data
} else {
postprocessed_data <- rbind(postprocessed_data, tmp_postprocessed_data)
}
count <- count + 1
}
cp_postprocessed_data <- postprocessed_data
r <- range(postprocessed_data$forecast_date)
horizon <- -28:0
probs <- c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975)
postprocessed_naive_ensemble_file <- paste("DATA/UNTRAINED_ENSEMBLE/POST_PROCESSED/", reparameterize_file, method_files, "postprocessed_naive_ensemble_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
if (file.exists(postprocessed_naive_ensemble_file)) {
postprocessed_naive_ensemble <- readRDS(file = postprocessed_naive_ensemble_file)
} else {
tmp_postprocessed_data <- postprocessed_data[!(postprocessed_data$model %in% c("Mean", "Median")), ]
postprocessed_naive_ensemble <- compute_naive_ensemble(data = tmp_postprocessed_data, loc = state, age_gr = age)
saveRDS(object = postprocessed_naive_ensemble, file = postprocessed_naive_ensemble_file)
}
postprocessed_data <- postprocessed_data[!(postprocessed_data$model %in% c("Mean", "Median")), ]
postprocessed_data <- rbind(postprocessed_data, postprocessed_naive_ensemble)
# Make all models comparable: `skip_first_days = 40` (`+ 1` excluded, since the range for the post-processes data is different)
# + 30 to exclude the noisy results when skipping the recent past
skip_first_days <- uncertain_size + 30
wis_truth <- compute_wis_truth(data = postprocessed_data, truth_data = truth_data, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = skip_first_days)
wis_truth <- compute_wis_truth(data = postprocessed_data, truth_data = truth_data, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = skip_first_days, strata = "all")
wis_truth <- compute_wis_truth(data = postprocessed_data, truth_data = truth_data, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = skip_first_days, strata = "all")
compute_wis_truth
compute_wis_truth <- function (data, truth_data, models, horizon, start_date, end_date, probs = c(0.025, 0.100, 0.250, 0.500, 0.750, 0.900, 0.975), skip_first_days = 41, verbose = TRUE, strata = "all", ...) {
wis <- list()
wis_summ <- list()
wis_sprd <- list()
wis_over <- list()
wis_undr <- list()
wis_summ_avg <- rep(0, length(models))
wis_sprd_avg <- rep(0, length(models))
wis_over_avg <- rep(0, length(models))
wis_undr_avg <- rep(0, length(models))
# if (!verbose) { b <- txtProgressBar(min = 1, max = length(horizon), initial = 1) }
count <- 1
for (h in horizon) {
if (verbose) { print(paste("Horizon: ", h, sep = "")) }
# Make all models comparable. Commonly, `skip_first_days = 40 + 1`
if (strata == "all") {
wis[[as.character(h)]] <- compute_wis_three_components(data = data, truth_data = truth_data, skip_first_days = skip_first_days, start_date = start_date, end_date = end_date, horizon = h, models = models, probs = probs, verbose = verbose)
wis_summ[[as.character(h)]] <- wis[[as.character(h)]]$wis      |> colMeans(na.rm = TRUE)
wis_sprd[[as.character(h)]] <- wis[[as.character(h)]]$wis_sprd |> colMeans(na.rm = TRUE)
wis_over[[as.character(h)]] <- wis[[as.character(h)]]$wis_over |> colMeans(na.rm = TRUE)
wis_undr[[as.character(h)]] <- wis[[as.character(h)]]$wis_undr |> colMeans(na.rm = TRUE)
} else if ((strata == "states") | (strata == "ages")) {
wis[[as.character(h)]] <- compute_wis_three_components_stratified(data = data, truth_data = truth_data, skip_first_days = skip_first_days, start_date = start_date, end_date = end_date, horizon = h, models = models, probs = probs, verbose = verbose)
wis_summ[[as.character(h)]] <- wis[[as.character(h)]]$wis      |> apply(MARGIN = 2, FUN = mean, na.rm = TRUE)
wis_sprd[[as.character(h)]] <- wis[[as.character(h)]]$wis_sprd |> apply(MARGIN = 2, FUN = mean, na.rm = TRUE)
wis_over[[as.character(h)]] <- wis[[as.character(h)]]$wis_over |> apply(MARGIN = 2, FUN = mean, na.rm = TRUE)
wis_undr[[as.character(h)]] <- wis[[as.character(h)]]$wis_undr |> apply(MARGIN = 2, FUN = mean, na.rm = TRUE)
} else { stop("Error.") }
wis_summ_avg <- wis_summ_avg + wis_summ[[as.character(h)]]
wis_sprd_avg <- wis_sprd_avg + wis_sprd[[as.character(h)]]
wis_over_avg <- wis_over_avg + wis_over[[as.character(h)]]
wis_undr_avg <- wis_undr_avg + wis_undr[[as.character(h)]]
count <- count + 1
# if (!verbose) { setTxtProgressBar(b, count) }
}
# if (!verbose) { close(b) }
wis_summ_avg <- wis_summ_avg / length(horizon)
wis_sprd_avg <- wis_sprd_avg / length(horizon)
wis_over_avg <- wis_over_avg / length(horizon)
wis_undr_avg <- wis_undr_avg / length(horizon)
df_wis <- data.frame(model = rep(models, 3), wis = c(wis_sprd_avg, wis_over_avg, wis_undr_avg), component = rep(c("sprd", "over", "undr"), each = length(models)))
df_wis$model <- factor(x = df_wis$model, levels = models)
list(df_wis = as_tibble(df_wis), wis_summ = wis_summ)
}
wis_truth <- compute_wis_truth(data = postprocessed_data, truth_data = truth_data, models = models, horizon = horizon, start_date = r[1], end_date = r[2], skip_first_days = skip_first_days)
df_wis <- wis_truth$df_wis
wis_summ <- wis_truth$wis_summ
# Bar plot
reference_pts <- c(182.23, 175.92, 125.06, 135.40, 93.67, 137.85, 143.98, 209.49, 81.95, 80.76)
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 220, skip_space = TRUE, reference_pts = reference_pts)
wis_bar
wis_bar <- plot_wis_bar(df_wis = df_wis, wis_summ = wis_summ, models = models, colors = colors, ylim_manual = 220, skip_space = TRUE, reference_pts = reference_pts)
# Line plot over the horizons
df_wis_horizon_truth <- compute_wis_horizon_truth(models = models, horizon = horizon, wis_summ = wis_summ)
wis_line_horizon <- plot_wis_line_horizon(df_wis_horizon = df_wis_horizon_truth, models = models, colors = colors)
if (skip_recent_days) { tmp_mtd <- "omit recent data" } else if (!skip_recent_days & method == "all_quant") { tmp_mtd <- "full set of quantiles" } else { tmp_mtd <- "plug-in point nowcast" }
tmp_ttl <- "" # paste("WIS (post-processed) ", ifelse(horiz, "varying weights horizon", "shared weights horizon"), " and ", tmp_mtd, sep = "")
p_total <- wis_bar + wis_line_horizon + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10")))
p_total
saveRDS(object = p_total, file = paste("PLOTS/POSTPROCESS/WIS_all_post_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, ".RDS", sep = ""))
ggsave(filename = paste("PLOTS/POSTPROCESS/WIS_all_post_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, ".jpeg", sep = ""), plot = p_total, width = 3500, height = 1400, units = c("px"), dpi = 300, bg = "white")
hh <- 0 # Horizon for the left-most plot
extra_skip <- 30
postprocessed_plots_file <- paste("RESULTS/FITTED_OBJECTS/POST_PROCESSED/PLOTS/postprocessed_plots_", method, "_hh_", hh, "_size_", training_size, "_skip_", as.character(skip_recent_days), "_state_", state, "_age_", age, "_quant_", as.character(quant), "_horiz_", as.character(horiz), ".RDS", sep = "")
if (file.exists(postprocessed_plots_file)) {
postprocessed_plots <- readRDS(file = postprocessed_plots_file)
} else {
postprocessed_plots <- list()
for (i in 1:length(models)) {
model <- models[i]
color <- colors[i]
print(paste("Model: ", model, " (", sprintf("%02d", i), "/", sprintf("%02d", length(models)), ").", sep = ""))
postprocessed_plots[[i]] <- plot_postprocessed_models(data = data, nowcasts = cp_postprocessed_data, truth_data = truth_data, model = model, r = r, training_size = training_size, uncertain_size = uncertain_size, hh = hh, ens_method = ens_method, extra_skip = extra_skip, skip_recent_days = skip_recent_days)
}
saveRDS(object = postprocessed_plots, file = postprocessed_plots_file)
}
if (skip_recent_days) { tmp_mtd <- "omit recent data" } else if (!skip_recent_days & method == "all_quant") { tmp_mtd <- "full set of quantiles" } else { tmp_mtd <- "plug-in point nowcast" }
tmp_ttl <- paste("Post-processed unweighted ensemble (", ifelse(horiz, "varying weights horizon", "shared weights horizon"), " and ", tmp_mtd, ")", sep = "")
# p_total <- postprocessed_plots[[9]]$p_total / postprocessed_plots[[10]]$p_total + plot_annotation(title = tmp_ttl, theme = theme(plot.margin = margin(), text = element_text(size = 14, family = "LM Roman 10")))
for (m in 1:length(models)) {
ggsave(filename = paste("PLOTS/POSTPROCESS/post_", models[m], "_skip_", skip_recent_days, "_horiz_", horiz, "_method_", method, ".jpeg", sep = ""), plot = postprocessed_plots[[m]]$p_total, width = 3500, height = 1400, units = c("px"), dpi = 300, bg = "white")
}
p_60  <- readRDS("PLOTS/POSTPROCESS/varying_weights_horizon_and_plug-in_point_nowcast/60/WIS_all_post_skip_FALSE_horiz_TRUE_method_Mean.RDS")  &  plot_annotation(title = "60")  & theme(plot.title = element_text(hjust = 0.5, size = 18))
p_90  <- readRDS("PLOTS/POSTPROCESS/varying_weights_horizon_and_plug-in_point_nowcast/90/WIS_all_post_skip_FALSE_horiz_TRUE_method_Mean.RDS")  &  plot_annotation(title = "90")  & theme(plot.title = element_text(hjust = 0.5, size = 18))
p_ALL <- readRDS("PLOTS/POSTPROCESS/varying_weights_horizon_and_plug-in_point_nowcast/200/WIS_all_post_skip_FALSE_horiz_TRUE_method_Mean.RDS") &  plot_annotation(title = "ALL") & theme(plot.title = element_text(hjust = 0.5, size = 18))
t_60  <- grid::textGrob("60",  gp = gpar(fontfamily = "LM Roman 10", cex = 1.5))
t_90  <- grid::textGrob("90",  gp = gpar(fontfamily = "LM Roman 10", cex = 1.5))
t_ALL <- grid::textGrob("ALL", gp = gpar(fontfamily = "LM Roman 10", cex = 1.5))
c_60  <- (wrap_elements(panel = t_60)  / p_60)  + plot_layout(heights = c(1, 10))
c_90  <- (wrap_elements(panel = t_90)  / p_90)  + plot_layout(heights = c(1, 10))
c_ALL <- (wrap_elements(panel = t_ALL) / p_ALL) + plot_layout(heights = c(1, 10))
p_total3 <-   wrap_elements(c_60  + plot_annotation(theme = theme(plot.margin = margin(-15, 0, -5, 0)))) /
wrap_elements(c_90  + plot_annotation(theme = theme(plot.margin = margin(-15, 0, -5, 0)))) /
wrap_elements(c_ALL + plot_annotation(theme = theme(plot.margin = margin(-15, 0, -5, 0))))
p_total3
ggsave(filename = "PLOTS/POSTPROCESS/varying_weights_horizon_and_plug-in_point_nowcast/WIS_3.jpeg", plot = p_total3, width = 3500, height = 4600, units = c("px"), dpi = 300, bg = "white")
